// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.2.0.dev0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __INITIALNEWTON2D_H
#define __INITIALNEWTON2D_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class initialnewton2d_finite_element_0: public ufc::finite_element
{
public:

  initialnewton2d_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~initialnewton2d_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 3;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[3] = {};
    const std::size_t num_components[3] = { 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 3; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[3 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 3 * num_derivatives, 0.0);
    const std::size_t reference_offsets[3] = {};
    const std::size_t physical_offsets[3] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[3 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[3];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[3];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 3, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 6, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new initialnewton2d_finite_element_0();
  }

};


class initialnewton2d_finite_element_1: public ufc::finite_element
{
public:

  initialnewton2d_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~initialnewton2d_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 6 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 3 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 4 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 5 + 1] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives * 2, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t physical_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[12];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[12];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = coordinate_dofs[0];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 4] = coordinate_dofs[2];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 5] = coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new initialnewton2d_finite_element_0();
    case 1:
        return new initialnewton2d_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new initialnewton2d_finite_element_1();
  }

};


class initialnewton2d_finite_element_2: public ufc::finite_element
{
public:

  initialnewton2d_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~initialnewton2d_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    for (std::size_t k = 0; k < num_points * 6; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 5] += coefficients5[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
            { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    const std::size_t reference_offset[6] = {};
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives, 0.0);
    const std::size_t reference_offsets[6] = {};
    const std::size_t physical_offsets[6] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[6];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[6];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new initialnewton2d_finite_element_2();
  }

};


class initialnewton2d_finite_element_3: public ufc::finite_element
{
public:

  initialnewton2d_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~initialnewton2d_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    for (std::size_t k = 0; k < num_points * 12 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 6 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 7 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 8 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 9 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 10 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 11 + 1] += coefficients5[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 2, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
            { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[24];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[24];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 12, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[8] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 10:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[3] = dof_values[7];
    vertex_values[5] = dof_values[8];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 6] = coordinate_dofs[0];
    dof_coordinates[2 * 6 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 7] = coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 8] = coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 11] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[24] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 24, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new initialnewton2d_finite_element_2();
    case 1:
        return new initialnewton2d_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new initialnewton2d_finite_element_3();
  }

};


class initialnewton2d_finite_element_4: public ufc::finite_element
{
public:

  initialnewton2d_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~initialnewton2d_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), FiniteElement('Lagrange', triangle, 1), FiniteElement('Lagrange', triangle, 1))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 18;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 4 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 4;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 4 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 4;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    static const double coefficients12[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients13[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients14[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 18 * 4; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 4 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 4 * ip + 4] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 4 * ip + 4 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 4 * ip + 4 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 4 * ip + 4 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 4 * ip + 4 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 4 * ip + 4 * 6 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 4 * ip + 4 * 7 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 4 * ip + 4 * 8 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 4 * ip + 4 * 9 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 4 * ip + 4 * 10 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[18 * 4 * ip + 4 * 11 + 1] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[18 * 4 * ip + 4 * 12 + 2] += coefficients12[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[18 * 4 * ip + 4 * 13 + 2] += coefficients13[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[18 * 4 * ip + 4 * 14 + 2] += coefficients14[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[18 * 4 * ip + 4 * 15 + 3] += coefficients12[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[18 * 4 * ip + 4 * 16 + 3] += coefficients13[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[18 * 4 * ip + 4 * 17 + 3] += coefficients14[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 18 * num_derivatives * 4, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
            { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    alignas(32) static const double dmats12[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    static const double coefficients12[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients13[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients14[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[18] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3 };
    const std::size_t num_components[18] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 18; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[18 * (num_derivatives * 4) * ip + num_derivatives * 4 * i + 4 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 18 * num_derivatives * 4, 0.0);
    const std::size_t reference_offsets[18] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3 };
    const std::size_t physical_offsets[18] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 18; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[18 * (num_derivatives * 4) * ip + num_derivatives * 4 * d + 4 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[18 * (num_derivatives * 4) * ip + num_derivatives * 4 * d + 4 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[72];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[72];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 4; ++k)
        values[k] = physical_values[4 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 18; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 4; ++s)
            values[r * 4 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 4 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471618, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999098, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 16:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 17:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 4 * num_derivatives * 18, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[16] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 18; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 4 * num_derivatives; ++s)
            values[4 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[4];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 10:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 14:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 15:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 16:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 17:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[4];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[12] = vals[2];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[13] = vals[2];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[15] = vals[3];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[16] = vals[3];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[17] = vals[3];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[4] = dof_values[1];
    vertex_values[8] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[5] = dof_values[7];
    vertex_values[9] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[12];
    vertex_values[6] = dof_values[13];
    vertex_values[10] = dof_values[14];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[15];
    vertex_values[7] = dof_values[16];
    vertex_values[11] = dof_values[17];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 6] = coordinate_dofs[0];
    dof_coordinates[2 * 6 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 7] = coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 8] = coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 11] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 12] = coordinate_dofs[0];
    dof_coordinates[2 * 12 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 13] = coordinate_dofs[2];
    dof_coordinates[2 * 13 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 14] = coordinate_dofs[4];
    dof_coordinates[2 * 14 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 15] = coordinate_dofs[0];
    dof_coordinates[2 * 15 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 16] = coordinate_dofs[2];
    dof_coordinates[2 * 16 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 17] = coordinate_dofs[4];
    dof_coordinates[2 * 17 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[36] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 36, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new initialnewton2d_finite_element_3();
    case 1:
        return new initialnewton2d_finite_element_0();
    case 2:
        return new initialnewton2d_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new initialnewton2d_finite_element_4();
  }

};


class initialnewton2d_finite_element_5: public ufc::finite_element
{
public:

  initialnewton2d_finite_element_5() : ufc::finite_element()
  {
    // Do nothing
  }

  ~initialnewton2d_finite_element_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', triangle, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[2] = { 0.3333333333333333, 0.3333333333333333 };
    std::copy_n(dof_X, 2, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new initialnewton2d_finite_element_5();
  }

};


class initialnewton2d_dofmap_0: public ufc::dofmap
{
public:

  initialnewton2d_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~initialnewton2d_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 3;
  }

  std::size_t num_element_dofs() const final override
  {
    return 3;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 2;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 2, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new initialnewton2d_dofmap_0();
  }

};


class initialnewton2d_dofmap_1: public ufc::dofmap
{
public:

  initialnewton2d_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~initialnewton2d_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 4;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 4, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 5;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new initialnewton2d_dofmap_0();
    case 1:
        return new initialnewton2d_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new initialnewton2d_dofmap_1();
  }

};


class initialnewton2d_dofmap_2: public ufc::dofmap
{
public:

  initialnewton2d_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~initialnewton2d_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0] + num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 1, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 3, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            break;
        case 1:
            dofs[0] = 4;
            break;
        case 2:
            dofs[0] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new initialnewton2d_dofmap_2();
  }

};


class initialnewton2d_dofmap_3: public ufc::dofmap
{
public:

  initialnewton2d_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~initialnewton2d_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0] + 2 * num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 12;
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 6;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 2, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 6, 12 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 9;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 11;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            dofs[1] = 9;
            break;
        case 1:
            dofs[0] = 4;
            dofs[1] = 10;
            break;
        case 2:
            dofs[0] = 5;
            dofs[1] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 11;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new initialnewton2d_dofmap_2();
    case 1:
        return new initialnewton2d_dofmap_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new initialnewton2d_dofmap_3();
  }

};


class initialnewton2d_dofmap_4: public ufc::dofmap
{
public:

  initialnewton2d_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~initialnewton2d_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), FiniteElement('Lagrange', triangle, 1), FiniteElement('Lagrange', triangle, 1))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 4 * num_global_entities[0] + 2 * num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 18;
  }

  std::size_t num_element_dofs() const final override
  {
    return 18;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 10;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 4, 2, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 4, 10, 18 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[12] = offset + entity_indices[0][0];
    dofs[13] = offset + entity_indices[0][1];
    dofs[14] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[15] = offset + entity_indices[0][0];
    dofs[16] = offset + entity_indices[0][1];
    dofs[17] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 13;
        dofs[7] = 14;
        dofs[8] = 16;
        dofs[9] = 17;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        dofs[6] = 12;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 17;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 11;
        dofs[6] = 12;
        dofs[7] = 13;
        dofs[8] = 15;
        dofs[9] = 16;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            dofs[2] = 12;
            dofs[3] = 15;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            dofs[2] = 13;
            dofs[3] = 16;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            dofs[2] = 14;
            dofs[3] = 17;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            dofs[1] = 9;
            break;
        case 1:
            dofs[0] = 4;
            dofs[1] = 10;
            break;
        case 2:
            dofs[0] = 5;
            dofs[1] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            dofs[2] = 12;
            dofs[3] = 15;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            dofs[2] = 13;
            dofs[3] = 16;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            dofs[2] = 14;
            dofs[3] = 17;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 9;
            dofs[6] = 13;
            dofs[7] = 14;
            dofs[8] = 16;
            dofs[9] = 17;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            dofs[6] = 12;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 17;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 11;
            dofs[6] = 12;
            dofs[7] = 13;
            dofs[8] = 15;
            dofs[9] = 16;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new initialnewton2d_dofmap_3();
    case 1:
        return new initialnewton2d_dofmap_0();
    case 2:
        return new initialnewton2d_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new initialnewton2d_dofmap_4();
  }

};


class initialnewton2d_dofmap_5: public ufc::dofmap
{
public:

  initialnewton2d_dofmap_5() : ufc::dofmap()
  {
    // Do nothing
  }

  ~initialnewton2d_dofmap_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', triangle, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = {};
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new initialnewton2d_dofmap_5();
  }

};


class initialnewton2d_coordinate_mapping_1: public ufc::coordinate_mapping
{
public:

  initialnewton2d_coordinate_mapping_1() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~initialnewton2d_coordinate_mapping_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new initialnewton2d_coordinate_mapping_1();
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new initialnewton2d_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new initialnewton2d_dofmap_1();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    initialnewton2d_finite_element_0 xelement;
    double phi[3];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[2 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t d = 0; d < 3; ++d)
                x[2 * ip + i] += coordinate_dofs[2 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double J[4];
    double detJ[1];
    double K[4];
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    initialnewton2d_finite_element_0 xelement;
    double dphi[6];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[2 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t j = 0; j < 2; ++j)
                for (std::size_t d = 0; d < 3; ++d)
                    J[2 * 2 * ip + 2 * i + j] += coordinate_dofs[2 * d + i] * dphi[2 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[2 * 2 * ip] * J[2 * 2 * ip + 2 + 1] - J[2 * 2 * ip + 1] * J[2 * 2 * ip + 2];
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[2 * 2 * ip] = J[2 * 2 * ip + 2 + 1] / detJ[ip];
        K[2 * 2 * ip + 1] = -J[2 * 2 * ip + 1] / detJ[ip];
        K[2 * 2 * ip + 2] = -J[2 * 2 * ip + 2] / detJ[ip];
        K[2 * 2 * ip + 2 + 1] = J[2 * 2 * ip] / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[3] = { 0.33333333333333337, 0.3333333333333333, 0.3333333333333333 };
    const double dphi_Xm[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t d = 0; d < 3; ++d)
            x[i] += coordinate_dofs[2 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t d = 0; d < 3; ++d)
                J[2 * i + j] += coordinate_dofs[2 * d + i] * dphi_Xm[j][d];
  }

};


class initialnewton2d_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  initialnewton2d_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~initialnewton2d_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 13
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 38
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           13
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights49[49] = { 0.003623466079725794, 0.00715464377909615, 0.008247603013529583, 0.006935542753734078, 0.004297910087982426, 0.001774485071438052, 0.0003375907567113747, 0.007827186648495099, 0.01545501766273407, 0.01781596040067579, 0.01498172921938941, 0.009284078756888543, 0.003833132573484685, 0.000729242610651565, 0.01068501060131498, 0.02109787781815244, 0.02432083637489712, 0.02045178462250981, 0.0126738360020928, 0.005232667115687635, 0.0009955000916249657, 0.01169603676441937, 0.02309417967090931, 0.02662209772138336, 0.02238695250460707, 0.01387304677156393, 0.005727787200652747, 0.001089695284831587, 0.01068501060131498, 0.02109787781815245, 0.02432083637489713, 0.02045178462250982, 0.0126738360020928, 0.005232667115687637, 0.0009955000916249662, 0.007827186648495099, 0.01545501766273407, 0.01781596040067579, 0.01498172921938941, 0.009284078756888543, 0.003833132573484685, 0.000729242610651565, 0.003623466079725802, 0.007154643779096167, 0.008247603013529604, 0.006935542753734095, 0.004297910087982437, 0.001774485071438057, 0.0003375907567113755 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE34_C0_D01_Q49[1][49][5] =
        { { { -2.810586324740912, -0.9100824542451502, 0.09949612950423231, 3.720668778986065, -0.09949612950424026 },
            { -2.451172124893734, -0.5412837873563827, 0.09011166246264335, 2.99245591225012, -0.09011166246265255 },
            { -1.862109731466276, 0.06315929113835896, 0.07473097739536029, 1.798950440327921, -0.07473097739537006 },
            { -1.132922924695843, 0.8113854946777803, 0.05569158062637229, 0.3215374300180672, -0.05569158062638371 },
            { -0.3746072524258175, 1.589501131547323, 0.03589161602685307, -1.2148938791215, -0.03589161602686611 },
            { 0.2973828832189765, 2.279037233052433, 0.01834565016653565, -2.576420116271403, -0.01834565016655054 },
            { 0.7806763961776377, 2.774949757852314, 0.005726638325313418, -3.555626154029944, -0.005726638325329759 },
            { -2.404765266166478, -0.9100824542451501, 0.5053171880786661, 3.314847720411632, -0.5053171880786754 },
            { -2.083628076369342, -0.5412837873563827, 0.4576557109870347, 2.624911863725729, -0.4576557109870443 },
            { -1.557299840810196, 0.06315929113835927, 0.3795408680514404, 1.494140549671841, -0.3795408680514511 },
            { -0.9057702071369256, 0.8113854946777804, 0.2828442981852892, 0.09438471245915019, -0.282844298185301 },
            { -0.2282138833315043, 1.589501131547323, 0.1822849851211657, -1.361287248215813, -0.1822849851211792 },
            { 0.3722104288523841, 2.279037233052433, 0.09317319579994297, -2.65124766190481, -0.09317319579995809 },
            { 0.8040339924865469, 2.774949757852314, 0.02908423463422307, -3.578983750338853, -0.02908423463423908 },
            { -1.748485229893193, -0.91008245424515, 1.16159722435195, 2.658567684138348, -1.161597224351961 },
            { -1.489248321053183, -0.5412837873563824, 1.052035466303193, 2.03053210840957, -1.052035466303204 },
            { -1.064371635460454, 0.06315929113835927, 0.8724690734011817, 1.0012123443221, -0.8724690734011935 },
            { -0.538426545270748, 0.8113854946777804, 0.650187960051466, -0.2729589494070267, -0.6501879600514787 },
            { 0.008528502381242828, 1.589501131547324, 0.4190273708339124, -1.59802963392856, -0.4190273708339264 },
            { 0.4932189948815581, 2.279037233052433, 0.2141817618291165, -2.772256227933984, -0.214181761829132 },
            { 0.8418071041301761, 2.774949757852314, 0.06685734627785214, -3.616756861982482, -0.06685734627786814 },
            { -0.9550412271225792, -0.9100824542451497, 1.955041227122563, 1.865123681367735, -1.955041227122576 },
            { -0.7706418936781961, -0.5412837873563825, 1.770641893678179, 1.311925681034585, -1.770641893678192 },
            { -0.4684203544308257, 0.06315929113835934, 1.468420354430809, 0.4052610632924725, -1.468420354430822 },
            { -0.09430725266111564, 0.8113854946777805, 1.094307252661098, -0.7170782420166586, -1.094307252661111 },
            { 0.2947505657736552, 1.589501131547324, 0.7052494342263244, -1.884251697320972, -0.7052494342263389 },
            { 0.6395186165262097, 2.279037233052433, 0.3604813834737681, -2.918555849578635, -0.3604813834737837 },
            { 0.8874748789261502, 2.774949757852314, 0.1125251210738261, -3.662424636778456, -0.1125251210738423 },
            { -0.1615972243519661, -0.9100824542451499, 2.748485229893175, 1.071679678597123, -2.74848522989319 },
            { -0.0520354663032098, -0.5412837873563825, 2.489248321053164, 0.5933192536595991, -2.48924832105318 },
            { 0.127530926598802, 0.06315929113835934, 2.064371635460435, -0.1906902177371543, -2.06437163546045 },
            { 0.3498120399485162, 0.8113854946777804, 1.538426545270729, -1.16119753462629, -1.538426545270743 },
            { 0.5809726291660676, 1.589501131547323, 0.9914714976187361, -2.170473760713384, -0.9914714976187511 },
            { 0.7858182381708615, 2.279037233052433, 0.5067810051184195, -3.064855471223287, -0.5067810051184353 },
            { 0.9331426537221245, 2.774949757852314, 0.1581928958698005, -3.708092411574431, -0.1581928958698165 },
            { 0.4946828119213179, -0.9100824542451498, 3.404765266166458, 0.4153996423238396, -3.404765266166475 },
            { 0.5423442890129496, -0.5412837873563821, 3.083628076369323, -0.00106050165655953, -3.08362807636934 },
            { 0.6204591319485436, 0.06315929113835934, 2.557299840810177, -0.6836184230868954, -2.557299840810193 },
            { 0.7171557018146937, 0.8113854946777805, 1.905770207136905, -1.528541196492467, -1.905770207136921 },
            { 0.8177150148788148, 1.589501131547324, 1.228213883331482, -2.407216146426131, -1.228213883331498 },
            { 0.9068268042000354, 2.279037233052433, 0.6277895711475935, -3.185864037252461, -0.627789571147609 },
            { 0.9709157653657534, 2.774949757852314, 0.1959660075134291, -3.745865523218059, -0.1959660075134456 },
            { 0.9005038704957511, -0.9100824542451497, 3.810586324740891, 0.009578583749407217, -3.81058632474091 },
            { 0.9098883375373397, -0.5412837873563823, 3.451172124893713, -0.3686045501809489, -3.451172124893731 },
            { 0.9252690226046234, 0.06315929113835934, 2.862109731466256, -0.9884283137429746, -2.862109731466273 },
            { 0.9443084193736098, 0.8113854946777805, 2.132922924695821, -1.755693914051383, -2.132922924695837 },
            { 0.9641083839731274, 1.589501131547324, 1.374607252425795, -2.553609515520443, -1.374607252425811 },
            { 0.9816543498334428, 2.279037233052433, 0.7026171167810004, -3.260691582885868, -0.7026171167810166 },
            { 0.9942733616746626, 2.774949757852314, 0.2193236038223383, -3.769223119526969, -0.2193236038223548 } } };
    alignas(32) static const double FE34_C0_D10_Q49[1][49][5] =
        { { { -2.810586324740908, -0.900503870495761, 0.08991754575484795, -0.08991754575484795, 3.711090195236669 },
            { -2.451172124893729, -0.9098883375373485, 0.4587162126436152, -0.4587162126436152, 3.361060462431078 },
            { -1.862109731466272, -0.9252690226046308, 1.063159291138356, -1.063159291138356, 2.787378754070903 },
            { -1.132922924695838, -0.944308419373617, 1.811385494677777, -1.811385494677777, 2.077231344069455 },
            { -0.3746072524258124, -0.9641083839731338, 2.589501131547318, -2.589501131547318, 1.338715636398947 },
            { 0.297382883218981, -0.9816543498334493, 3.279037233052426, -3.279037233052426, 0.6842714666144688 },
            { 0.7806763961776416, -0.9942733616746693, 3.774949757852304, -3.774949757852304, 0.213596965497028 },
            { -2.404765266166474, -0.4946828119213267, 0.08991754575484825, -0.08991754575484825, 2.899448078087801 },
            { -2.083628076369338, -0.5423442890129571, 0.4587162126436155, -0.4587162126436155, 2.625972365382295 },
            { -1.557299840810191, -0.6204591319485502, 1.063159291138356, -1.063159291138356, 2.177758972758742 },
            { -0.9057702071369206, -0.7171557018146996, 1.811385494677777, -1.811385494677777, 1.62292590895162 },
            { -0.2282138833314995, -0.8177150148788208, 2.589501131547318, -2.589501131547318, 1.045928898210321 },
            { 0.3722104288523886, -0.9068268042000419, 3.279037233052426, -3.279037233052426, 0.5346163753476536 },
            { 0.8040339924865511, -0.9709157653657602, 3.774949757852305, -3.774949757852305, 0.1668817728792096 },
            { -1.748485229893189, 0.1615972243519586, 0.08991754575484837, -0.08991754575484837, 1.58688800554123 },
            { -1.489248321053178, 0.05203546630320229, 0.4587162126436154, -0.4587162126436154, 1.437212854749976 },
            { -1.064371635460449, -0.1275309265988078, 1.063159291138356, -1.063159291138356, 1.191902562059257 },
            { -0.5384265452707427, -0.3498120399485219, 1.811385494677776, -1.811385494677776, 0.888238585219265 },
            { 0.008528502381247879, -0.5809726291660736, 2.589501131547318, -2.589501131547318, 0.572444126784826 },
            { 0.4932189948815626, -0.7858182381708678, 3.279037233052426, -3.279037233052426, 0.2925992432893055 },
            { 0.8418071041301801, -0.9331426537221311, 3.774949757852305, -3.774949757852305, 0.09133554959195143 },
            { -0.9550412271225739, 0.9550412271225732, 0.08991754575484862, -0.08991754575484862, 0.0 },
            { -0.7706418936781908, 0.7706418936781904, 0.4587162126436156, -0.4587162126436156, 0.0 },
            { -0.4684203544308203, 0.4684203544308205, 1.063159291138356, -1.063159291138356, 0.0 },
            { -0.09430725266111019, 0.09430725266111048, 1.811385494677776, -1.811385494677776, 0.0 },
            { 0.2947505657736605, -0.294750565773661, 2.589501131547317, -2.589501131547317, 0.0 },
            { 0.6395186165262142, -0.639518616526216, 3.279037233052425, -3.279037233052425, 0.0 },
            { 0.8874748789261543, -0.887474878926157, 3.774949757852305, -3.774949757852305, 0.0 },
            { -0.1615972243519597, 1.748485229893188, 0.08991754575484875, -0.08991754575484875, -1.586888005541228 },
            { -0.05203546630320351, 1.489248321053178, 0.4587162126436156, -0.4587162126436156, -1.437212854749974 },
            { 0.1275309265988084, 1.064371635460449, 1.063159291138356, -1.063159291138356, -1.191902562059257 },
            { 0.3498120399485224, 0.5384265452707429, 1.811385494677776, -1.811385494677776, -0.8882385852192649 },
            { 0.5809726291660733, -0.008528502381248526, 2.589501131547317, -2.589501131547317, -0.5724441267848244 },
            { 0.7858182381708664, -0.4932189948815644, 3.279037233052425, -3.279037233052425, -0.2925992432893016 },
            { 0.9331426537221285, -0.8418071041301828, 3.774949757852305, -3.774949757852305, -0.09133554959194533 },
            { 0.494682811921326, 2.404765266166474, 0.08991754575484887, -0.08991754575484887, -2.899448078087799 },
            { 0.5423442890129571, 2.083628076369338, 0.4587162126436157, -0.4587162126436157, -2.625972365382295 },
            { 0.6204591319485511, 1.557299840810192, 1.063159291138356, -1.063159291138356, -2.177758972758743 },
            { 0.7171557018147002, 0.9057702071369205, 1.811385494677776, -1.811385494677776, -1.622925908951621 },
            { 0.8177150148788205, 0.2282138833314986, 2.589501131547317, -2.589501131547317, -1.045928898210319 },
            { 0.9068268042000404, -0.3722104288523904, 3.279037233052425, -3.279037233052425, -0.5346163753476496 },
            { 0.9709157653657576, -0.8040339924865536, 3.774949757852305, -3.774949757852305, -0.1668817728792035 },
            { 0.9005038704957602, 2.810586324740908, 0.08991754575484895, -0.08991754575484895, -3.711090195236668 },
            { 0.9098883375373484, 2.45117212489373, 0.4587162126436156, -0.4587162126436156, -3.361060462431078 },
            { 0.9252690226046316, 1.862109731466272, 1.063159291138356, -1.063159291138356, -2.787378754070904 },
            { 0.944308419373617, 1.132922924695837, 1.811385494677776, -1.811385494677776, -2.077231344069454 },
            { 0.9641083839731334, 0.3746072524258114, 2.589501131547317, -2.589501131547317, -1.338715636398945 },
            { 0.981654349833448, -0.297382883218983, 3.279037233052425, -3.279037233052425, -0.6842714666144648 },
            { 0.9942733616746667, -0.7806763961776446, 3.774949757852305, -3.774949757852305, -0.2135969654970219 } } };
    alignas(32) static const double FE34_C0_Q49[1][49][6] =
        { { { 0.8624244361025749, -0.02363659740277002, -0.02146874080939055, 0.002236611944281942, 0.08565964255192414, 0.09478464761337956 },
            { 0.6260305982320046, -0.02151290165169063, -0.08837648269314125, 0.01033392012997215, 0.3957771515781187, 0.07774771440473618 },
            { 0.3084315815026736, -0.01798465447603435, -0.1245013629928625, 0.01986273323843486, 0.7607196383164689, 0.05347206441131927 },
            { 0.03543929416267128, -0.01353520113751297, -0.04270669737831205, 0.0252197303305776, 0.9658864117649357, 0.0296964622576404 },
            { -0.1074586758037479, -0.008811877994089196, 0.1908142308987769, 0.02323534507865832, 0.8898867588974482, 0.01233421892295345 },
            { -0.1139454275960456, -0.004544342181633655, 0.5242513387049099, 0.01503901749016921, 0.5759769216262262, 0.00322249195637405 },
            { -0.04881804555638587, -0.00142756028301928, 0.8375432698255753, 0.005404442989879767, 0.2069838962851253, 0.0003139967388248929 },
            { 0.5978619981700886, -0.09441111444870158, -0.02146874080939055, 0.01135922034494406, 0.07653703415126197, 0.4301216025917975 },
            { 0.4176882450793233, -0.08823283402187905, -0.08837648269314125, 0.05248352360967481, 0.3536275480984162, 0.352809999927606 },
            { 0.1781478492734307, -0.07687880819770677, -0.1245013629928625, 0.1008781000589046, 0.6797042714959993, 0.2426499503622346 },
            { -0.02244754148289256, -0.0607109624193334, -0.04270669737831205, 0.1280850147462928, 0.8630211273492205, 0.1347590591850247 },
            { -0.1184898029318446, -0.04141776930521639, 0.1908142308987769, 0.1180067938088454, 0.7951153101672611, 0.05597123736217727 },
            { -0.10768242458169, -0.02220814339804257, 0.5242513387049099, 0.0763795945376375, 0.5146363445787578, 0.0146232901584273 },
            { -0.04419116736576674, -0.007165322070527795, 0.8375432698255754, 0.02744788112246194, 0.1849404581525429, 0.001424880335714323 },
            { 0.2571500748943296, -0.1217357921352177, -0.02146874080939055, 0.02611199289234355, 0.06178426160386248, 0.7981582035540725 },
            { 0.1522325702199639, -0.1246615387808259, -0.08837648269314125, 0.1206464311673418, 0.285464640540749, 0.6546943795459121 },
            { 0.01661087229659385, -0.1229669828451063, -0.1245013629928625, 0.2318934004043382, 0.5486889711505657, 0.450275101986471 },
            { -0.08876210691847655, -0.1097039420883818, -0.04270669737831205, 0.2944352599128458, 0.6966708821826675, 0.250066604289657 },
            { -0.1249909080808916, -0.0828088505199826, 0.1908142308987769, 0.2712679627309381, 0.6418541412451684, 0.1038634237259905 },
            { -0.09459187788600246, -0.04781121206975434, 0.5242513387049099, 0.1755774929196237, 0.4154384461967716, 0.02713581213445154 },
            { -0.03642009992949465, -0.01615559847555263, 0.8375432698255754, 0.06309578078557344, 0.1492925584894315, 0.002644089304467039 },
            { -0.01098703181202573, -0.01098703181202572, -0.02146874080939053, 0.04394812724810312, 0.04394812724810298, 0.9555465499372358 },
            { -0.05076388396351129, -0.05076388396351134, -0.08837648269314125, 0.2030555358540455, 0.2030555358540454, 0.7837931789120729 },
            { -0.09757279644436297, -0.09757279644436299, -0.1245013629928625, 0.3902911857774519, 0.3902911857774519, 0.5390645843266845 },
            { -0.1238882677619391, -0.1238882677619392, -0.04270669737831205, 0.4955530710477567, 0.4955530710477565, 0.2993770908066771 },
            { -0.1141402629970133, -0.1141402629970134, 0.1908142308987769, 0.4565610519880533, 0.4565610519880532, 0.124344191119143 },
            { -0.07387699238954938, -0.07387699238954945, 0.5242513387049098, 0.2955079695581977, 0.2955079695581976, 0.03248670695779358 },
            { -0.02654854240937558, -0.02654854240937561, 0.8375432698255754, 0.1061941696375025, 0.1061941696375023, 0.003165475718171012 },
            { -0.1217357921352177, 0.2571500748943296, -0.02146874080939055, 0.06178426160386268, 0.02611199289234344, 0.7981582035540725 },
            { -0.1246615387808259, 0.1522325702199636, -0.08837648269314125, 0.285464640540749, 0.1206464311673419, 0.6546943795459126 },
            { -0.1229669828451062, 0.01661087229659389, -0.1245013629928625, 0.5486889711505658, 0.231893400404338, 0.4502751019864709 },
            { -0.1097039420883817, -0.08876210691847662, -0.04270669737831205, 0.6966708821826676, 0.2944352599128457, 0.250066604289657 },
            { -0.08280885051998249, -0.1249909080808916, 0.1908142308987769, 0.6418541412451685, 0.271267962730938, 0.1038634237259905 },
            { -0.04781121206975424, -0.09459187788600253, 0.5242513387049099, 0.4154384461967717, 0.1755774929196236, 0.02713581213445154 },
            { -0.01615559847555257, -0.0364200999294947, 0.8375432698255754, 0.1492925584894317, 0.06309578078557325, 0.002644089304467039 },
            { -0.09441111444870155, 0.5978619981700886, -0.02146874080939055, 0.0765370341512621, 0.01135922034494392, 0.4301216025917975 },
            { -0.08823283402187897, 0.4176882450793233, -0.08837648269314125, 0.3536275480984163, 0.0524835236096747, 0.352809999927606 },
            { -0.07687880819770654, 0.1781478492734308, -0.1245013629928625, 0.6797042714959994, 0.1008781000589044, 0.2426499503622344 },
            { -0.06071096241933321, -0.02244754148289255, -0.04270669737831205, 0.8630211273492208, 0.1280850147462926, 0.1347590591850246 },
            { -0.04141776930521627, -0.1184898029318446, 0.1908142308987769, 0.7951153101672612, 0.1180067938088453, 0.05597123736217727 },
            { -0.02220814339804247, -0.10768242458169, 0.5242513387049099, 0.514636344578758, 0.07637959453763735, 0.0146232901584273 },
            { -0.007165322070527736, -0.04419116736576677, 0.8375432698255754, 0.1849404581525431, 0.02744788112246175, 0.001424880335714323 },
            { -0.02363659740277012, 0.8624244361025747, -0.02146874080939055, 0.08565964255192417, 0.002236611944281803, 0.09478464761337987 },
            { -0.02151290165169072, 0.6260305982320042, -0.08837648269314125, 0.3957771515781189, 0.01033392012997211, 0.07774771440473678 },
            { -0.01798465447603422, 0.3084315815026735, -0.1245013629928625, 0.760719638316469, 0.01986273323843477, 0.05347206441131927 },
            { -0.01353520113751291, 0.03543929416267112, -0.04270669737831205, 0.9658864117649356, 0.02521973033057774, 0.02969646225764062 },
            { -0.008811877994089076, -0.107458675803748, 0.1908142308987769, 0.8898867588974482, 0.02323534507865835, 0.01233421892295351 },
            { -0.004544342181633541, -0.1139454275960457, 0.5242513387049099, 0.5759769216262263, 0.01503901749016905, 0.00322249195637405 },
            { -0.001427560283019225, -0.0488180455563859, 0.8375432698255754, 0.2069838962851254, 0.005404442989879504, 0.000313996738824917 } } };
    alignas(32) static const double FE36_C2_D01_Q49[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE36_C2_Q49[1][49][3] =
        { { { 0.9526465811852268, 0.02487403237606073, 0.0224793864387125 },
            { 0.8627930312234321, 0.02252791561566352, 0.1146790531609042 },
            { 0.7155274328665678, 0.01868274434884274, 0.2657898227845895 },
            { 0.5332307311739594, 0.01392289515659603, 0.4528463736694446 },
            { 0.343651813106453, 0.008972904006716695, 0.6473752828868302 },
            { 0.1756542791952546, 0.004586412541637936, 0.8197593082631076 },
            { 0.05483090095558923, 0.00143165958133301, 0.9437374394630776 },
            { 0.8511913165416183, 0.1263292970196692, 0.0224793864387125 },
            { 0.7709070190923345, 0.1144139277467613, 0.1146790531609042 },
            { 0.6393249602025477, 0.09488521701286287, 0.2657898227845895 },
            { 0.4764425517842301, 0.07071107454632534, 0.4528463736694446 },
            { 0.3070534708328747, 0.04557124628029494, 0.6473752828868302 },
            { 0.1569473927869027, 0.02329329894998982, 0.8197593082631076 },
            { 0.04899150187836195, 0.007271058658560332, 0.9437374394630778 },
            { 0.6871213074732972, 0.2903993060879904, 0.0224793864387125 },
            { 0.6223120802632945, 0.2630088665758011, 0.1146790531609042 },
            { 0.5160929088651123, 0.2181172683502983, 0.2657898227845895 },
            { 0.3846066363176858, 0.1625469900128697, 0.4528463736694446 },
            { 0.2478678744046879, 0.1047568427084817, 0.6473752828868302 },
            { 0.1266952512796092, 0.05354544045728332, 0.8197593082631076 },
            { 0.03954822396745468, 0.0167143365694676, 0.9437374394630778 },
            { 0.4887603067806437, 0.4887603067806437, 0.02247938643871252 },
            { 0.442660473419548, 0.4426604734195478, 0.1146790531609042 },
            { 0.3671050886077052, 0.3671050886077054, 0.2657898227845895 },
            { 0.2735768131652777, 0.2735768131652778, 0.4528463736694446 },
            { 0.1763123585565848, 0.1763123585565848, 0.6473752828868302 },
            { 0.09012034586844622, 0.09012034586844622, 0.8197593082631074 },
            { 0.02813128026846114, 0.02813128026846114, 0.9437374394630778 },
            { 0.2903993060879904, 0.6871213074732971, 0.0224793864387125 },
            { 0.2630088665758013, 0.6223120802632945, 0.1146790531609042 },
            { 0.2181172683502983, 0.5160929088651123, 0.2657898227845895 },
            { 0.1625469900128697, 0.3846066363176858, 0.4528463736694446 },
            { 0.1047568427084817, 0.2478678744046879, 0.6473752828868302 },
            { 0.05354544045728332, 0.1266952512796092, 0.8197593082631076 },
            { 0.0167143365694676, 0.03954822396745468, 0.9437374394630778 },
            { 0.1263292970196692, 0.8511913165416183, 0.0224793864387125 },
            { 0.1144139277467613, 0.7709070190923345, 0.1146790531609042 },
            { 0.09488521701286277, 0.6393249602025478, 0.2657898227845895 },
            { 0.07071107454632526, 0.4764425517842301, 0.4528463736694446 },
            { 0.04557124628029494, 0.3070534708328747, 0.6473752828868302 },
            { 0.02329329894998982, 0.1569473927869027, 0.8197593082631076 },
            { 0.007271058658560332, 0.04899150187836195, 0.9437374394630778 },
            { 0.02487403237606078, 0.9526465811852267, 0.0224793864387125 },
            { 0.02252791561566372, 0.8627930312234321, 0.1146790531609042 },
            { 0.01868274434884274, 0.7155274328665678, 0.2657898227845895 },
            { 0.01392289515659617, 0.5332307311739592, 0.4528463736694446 },
            { 0.008972904006716751, 0.343651813106453, 0.6473752828868302 },
            { 0.004586412541637936, 0.1756542791952546, 0.8197593082631076 },
            { 0.001431659581333028, 0.05483090095558925, 0.9437374394630778 } } };
    alignas(32) static const double PI0[1][5][5] =
        { { { 0.5, 0.166666666666668, 0.0, 0.0, -0.6666666666666685 },
            { 0.166666666666668, 0.5, 0.0, 0.0, -0.6666666666666689 },
            { 0.0, 0.0, 1.33333333333333, -1.33333333333333, 0.0 },
            { 0.0, 0.0, -1.33333333333333, 1.33333333333333, 0.0 },
            { -0.6666666666666685, -0.6666666666666689, 0.0, 0.0, 1.333333333333337 } } };
    alignas(32) static const double PI1[1][5][5] =
        { { { 0.5, 0.1666666666666666, 0.0, -0.6666666666666683, 0.0 },
            { 0.1666666666666666, -0.1666666666666667, 0.6666666666666647, 0.0, -0.6666666666666674 },
            { 0.0, 0.666666666666667, 0.6666666666666561, -0.6666666666666594, -0.6666666666666656 },
            { 0.0, -0.666666666666667, -0.6666666666666561, 0.6666666666666594, 0.6666666666666656 },
            { -0.6666666666666676, 0.0, -0.6666666666666672, 0.6666666666666667, 0.6666666666666689 } } };
    alignas(32) static const double PI2[1][5][5] =
        { { { 0.5, 0.1666666666666657, 0.0, -0.6666666666666679, 0.0 },
            { 0.1666666666666657, 0.5, 0.0, -0.6666666666666659, 0.0 },
            { 0.0, 0.0, 1.333333333333316, 0.0, -1.333333333333326 },
            { -0.6666666666666679, -0.6666666666666659, 0.0, 1.333333333333333, 0.0 },
            { 0.0, 0.0, -1.333333333333326, 0.0, 1.333333333333336 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE36_C2_D01_Q49[0][0][0] + coordinate_dofs[2] * FE36_C2_D01_Q49[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE36_C2_D01_Q49[0][0][0] + coordinate_dofs[5] * FE36_C2_D01_Q49[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE36_C2_D01_Q49[0][0][0] + coordinate_dofs[4] * FE36_C2_D01_Q49[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE36_C2_D01_Q49[0][0][0] + coordinate_dofs[3] * FE36_C2_D01_Q49[0][0][1];
    const double w1_d1_c3 = w[1][15] * FE36_C2_D01_Q49[0][0][0] + w[1][17] * FE36_C2_D01_Q49[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE36_C2_D01_Q49[0][0][ic];
    const double w1_d1_c2 = w[1][12] * FE36_C2_D01_Q49[0][0][0] + w[1][14] * FE36_C2_D01_Q49[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 12] * FE36_C2_D01_Q49[0][0][ic];
    const double w9_d1 = w[9][0] * FE36_C2_D01_Q49[0][0][0] + w[9][2] * FE36_C2_D01_Q49[0][0][1];
    double w9_d0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w9_d0 += w[9][ic] * FE36_C2_D01_Q49[0][0][ic];
    alignas(32) double sp[160];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = sp[3] + sp[3];
    sp[6] = sp[4] + sp[4];
    sp[7] = J_c3 / sp[2];
    sp[8] = -1 * J_c2 / sp[2];
    sp[9] = sp[7] + sp[7];
    sp[10] = sp[8] + sp[8];
    sp[11] = -1 * (2 * w[3][0] / 3) + w[2][0];
    sp[12] = sp[11] * (sp[5] / 2);
    sp[13] = sp[11] * (sp[6] / 2);
    sp[14] = sp[11] * (sp[9] / 2);
    sp[15] = sp[11] * (sp[10] / 2);
    sp[16] = 2 * w[3][0] * (sp[9] / 2);
    sp[17] = 2 * w[3][0] * (sp[10] / 2);
    sp[18] = sp[14] + sp[16];
    sp[19] = sp[15] + sp[17];
    sp[20] = sp[12] * sp[7];
    sp[21] = sp[12] * sp[8];
    sp[22] = sp[13] * sp[7];
    sp[23] = sp[13] * sp[8];
    sp[24] = sp[18] * sp[7];
    sp[25] = sp[18] * sp[8];
    sp[26] = sp[19] * sp[7];
    sp[27] = sp[19] * sp[8];
    sp[28] = 2 * w[3][0] * (sp[8] / 2);
    sp[29] = 2 * w[3][0] * (sp[7] / 2);
    sp[30] = 2 * w[3][0] * (sp[4] / 2);
    sp[31] = 2 * w[3][0] * (sp[3] / 2);
    sp[32] = sp[28] * sp[4];
    sp[33] = sp[29] * sp[4];
    sp[34] = sp[30] * sp[4];
    sp[35] = sp[31] * sp[4];
    sp[36] = sp[28] * sp[3];
    sp[37] = sp[29] * sp[3];
    sp[38] = sp[30] * sp[3];
    sp[39] = sp[31] * sp[3];
    sp[40] = sp[20] + sp[32];
    sp[41] = sp[36] + sp[21];
    sp[42] = sp[22] + sp[33];
    sp[43] = sp[37] + sp[23];
    sp[44] = sp[24] + sp[34];
    sp[45] = sp[38] + sp[25];
    sp[46] = sp[26] + sp[35];
    sp[47] = sp[39] + sp[27];
    sp[48] = 2 * w[3][0] * (sp[5] / 2);
    sp[49] = 2 * w[3][0] * (sp[6] / 2);
    sp[50] = sp[12] + sp[48];
    sp[51] = sp[13] + sp[49];
    sp[52] = sp[50] * sp[3];
    sp[53] = sp[50] * sp[4];
    sp[54] = sp[51] * sp[3];
    sp[55] = sp[51] * sp[4];
    sp[56] = sp[14] * sp[3];
    sp[57] = sp[14] * sp[4];
    sp[58] = sp[15] * sp[3];
    sp[59] = sp[15] * sp[4];
    sp[60] = sp[28] * sp[8];
    sp[61] = sp[29] * sp[8];
    sp[62] = sp[30] * sp[8];
    sp[63] = sp[31] * sp[8];
    sp[64] = sp[28] * sp[7];
    sp[65] = sp[29] * sp[7];
    sp[66] = sp[30] * sp[7];
    sp[67] = sp[31] * sp[7];
    sp[68] = sp[52] + sp[60];
    sp[69] = sp[64] + sp[53];
    sp[70] = sp[54] + sp[61];
    sp[71] = sp[65] + sp[55];
    sp[72] = sp[56] + sp[62];
    sp[73] = sp[66] + sp[57];
    sp[74] = sp[58] + sp[63];
    sp[75] = sp[67] + sp[59];
    sp[76] = w1_d1_c3 * sp[3];
    sp[77] = w1_d0_c3 * sp[4];
    sp[78] = sp[76] + sp[77];
    sp[79] = -1 * sp[78] * w[7][0];
    sp[80] = sp[79] * sp[3];
    sp[81] = sp[79] * sp[4];
    sp[82] = w1_d0_c3 * sp[7];
    sp[83] = w1_d1_c3 * sp[8];
    sp[84] = sp[82] + sp[83];
    sp[85] = -1 * sp[84] * w[7][0];
    sp[86] = sp[85] * sp[8];
    sp[87] = sp[85] * sp[7];
    sp[88] = sp[80] + sp[86];
    sp[89] = sp[87] + sp[81];
    sp[90] = -1 * sp[3] * w[7][0];
    sp[91] = -1 * sp[4] * w[7][0];
    sp[92] = sp[90] * sp[3];
    sp[93] = sp[91] * sp[3];
    sp[94] = sp[90] * sp[4];
    sp[95] = sp[91] * sp[4];
    sp[96] = -1 * sp[8] * w[7][0];
    sp[97] = -1 * sp[7] * w[7][0];
    sp[98] = sp[96] * sp[8];
    sp[99] = sp[97] * sp[8];
    sp[100] = sp[96] * sp[7];
    sp[101] = sp[97] * sp[7];
    sp[102] = sp[92] + sp[98];
    sp[103] = sp[93] + sp[99];
    sp[104] = sp[100] + sp[94];
    sp[105] = sp[101] + sp[95];
    sp[106] = (1 + -1 * w[11][0]) * w[10][0];
    sp[107] = -1 * w[11][0] / sp[106];
    sp[108] = w[11][0] / (1 + -1 * w[11][0]);
    sp[109] = w1_d1_c2 * sp[3];
    sp[110] = w1_d0_c2 * sp[4];
    sp[111] = sp[109] + sp[110];
    sp[112] = sp[78] + -1 * sp[111];
    sp[113] = sp[112] / w[15][0];
    sp[114] = w1_d0_c2 * sp[7];
    sp[115] = w1_d1_c2 * sp[8];
    sp[116] = sp[114] + sp[115];
    sp[117] = sp[84] + -1 * sp[116];
    sp[118] = sp[117] / w[15][0];
    sp[119] = w9_d1 * sp[3];
    sp[120] = w9_d0 * sp[4];
    sp[121] = sp[119] + sp[120];
    sp[122] = sp[112] + -1 * sp[121];
    sp[123] = w9_d0 * sp[7];
    sp[124] = w9_d1 * sp[8];
    sp[125] = sp[123] + sp[124];
    sp[126] = sp[117] + -1 * sp[125];
    sp[127] = -1 * sp[3] * w[4][0];
    sp[128] = -1 * sp[4] * w[4][0];
    sp[129] = sp[127] * sp[3];
    sp[130] = sp[128] * sp[3];
    sp[131] = sp[127] * sp[4];
    sp[132] = sp[128] * sp[4];
    sp[133] = -1 * sp[8] * w[4][0];
    sp[134] = -1 * sp[7] * w[4][0];
    sp[135] = sp[133] * sp[8];
    sp[136] = sp[134] * sp[8];
    sp[137] = sp[133] * sp[7];
    sp[138] = sp[134] * sp[7];
    sp[139] = sp[129] + sp[135];
    sp[140] = sp[130] + sp[136];
    sp[141] = sp[137] + sp[131];
    sp[142] = sp[138] + sp[132];
    sp[143] = std::abs(sp[2]);
    sp[144] = sp[40] * sp[143];
    sp[145] = sp[41] * sp[143];
    sp[146] = sp[68] * sp[143];
    sp[147] = sp[69] * sp[143];
    sp[148] = sp[42] * sp[143];
    sp[149] = sp[43] * sp[143];
    sp[150] = sp[70] * sp[143];
    sp[151] = sp[71] * sp[143];
    sp[152] = sp[44] * sp[143];
    sp[153] = sp[45] * sp[143];
    sp[154] = sp[72] * sp[143];
    sp[155] = sp[73] * sp[143];
    sp[156] = sp[46] * sp[143];
    sp[157] = sp[47] * sp[143];
    sp[158] = sp[74] * sp[143];
    sp[159] = sp[75] * sp[143];
    alignas(32) double BF0[6][3] = {};
    alignas(32) double BF1[6][3] = {};
    alignas(32) double BF2[5][3] = {};
    alignas(32) double BF3[5][3] = {};
    alignas(32) double BF4[5][3] = {};
    alignas(32) double BF5[5][3] = {};
    alignas(32) double BF6[6][3] = {};
    alignas(32) double BF7[6][3] = {};
    alignas(32) double BF8[5][3] = {};
    alignas(32) double BF9[5][3] = {};
    alignas(32) double BF10[5][3] = {};
    alignas(32) double BF11[5][3] = {};
    alignas(32) double TP0[2] = {};
    alignas(32) double TP1[3] = {};
    alignas(32) double TP2[2] = {};
    alignas(32) double TP3[3] = {};
    alignas(32) double TP4[2] = {};
    alignas(32) double TP5[3] = {};
    alignas(32) double TP6[2] = {};
    alignas(32) double TP7[3] = {};
    alignas(32) double TP8[3] = {};
    alignas(32) double TP9[2] = {};
    alignas(32) double TP10[3] = {};
    alignas(32) double TP11[2] = {};
    alignas(32) double BF12[3][3] = {};
    alignas(32) double TP12[3] = {};
    alignas(32) double BF13[3][3] = {};
    alignas(32) double TP13[3] = {};
    alignas(32) double TP14[3] = {};
    alignas(32) double TP15[2] = {};
    alignas(32) double TP16[3] = {};
    alignas(32) double TP17[2] = {};
    for (int iq = 0; iq < 49; ++iq)
    {
        // Quadrature loop body setup (num_points=49)
        // Unstructured varying computations for num_points=49
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE36_C2_Q49[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c2 += w[1][ic + 12] * FE36_C2_Q49[0][iq][ic];
        double w9 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w9 += w[9][ic] * FE36_C2_Q49[0][iq][ic];
        double w12_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w12_c0 += w[12][ic] * FE34_C0_Q49[0][iq][ic];
        double w12_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w12_c1 += w[12][ic + 6] * FE34_C0_Q49[0][iq][ic];
        double w0 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w0 += w[0][ic] * FE36_C2_Q49[0][iq][ic];
        alignas(32) double sv49[210];
        sv49[0] = w1_c3 + -1 * w1_c2;
        sv49[1] = sv49[0] + -1 * w9;
        sv49[2] = std::abs(sv49[1]);
        sv49[3] = sv49[1] + sv49[2];
        sv49[4] = sv49[3] / 2 / w[10][0];
        sv49[5] = std::pow(sv49[4], 1 / (1 + -1 * w[11][0]));
        sv49[6] = std::pow(1 + sv49[5], -1 * w[11][0]);
        sv49[7] = -1 * (1.0 + -1 * (-1.0 * sv49[6])) * sp[7];
        sv49[8] = -1 * (1.0 + -1 * (-1.0 * sv49[6])) * sp[8];
        sv49[9] = -1 * (-1 * sv49[6]) * sp[7];
        sv49[10] = -1 * (-1 * sv49[6]) * sp[8];
        sv49[11] = -1 * (1.0 + -1 * (-1.0 * sv49[6])) * sp[3];
        sv49[12] = -1 * (1.0 + -1 * (-1.0 * sv49[6])) * sp[4];
        sv49[13] = -1 * (-1 * sv49[6]) * sp[3];
        sv49[14] = -1 * (-1 * sv49[6]) * sp[4];
        sv49[15] = -1 * sv49[0] / w[15][0];
        sv49[16] = std::tanh(sv49[15]);
        sv49[17] = (1 + sv49[16]) / 2 * w[16][0];
        sv49[18] = std::pow(1 + -1 * sv49[6], 3) / w[8][0];
        sv49[19] = sv49[18] * w[13][0];
        sv49[20] = sp[88] * sv49[19];
        sv49[21] = sp[89] * sv49[19];
        sv49[22] = w1_c3 * (-1 * w[13][0]);
        sv49[23] = sv49[22] * sv49[18];
        sv49[24] = sp[102] * sv49[23];
        sv49[25] = sp[103] * sv49[23];
        sv49[26] = sp[104] * sv49[23];
        sv49[27] = sp[105] * sv49[23];
        sv49[28] = w1_c3 * w[13][0];
        sv49[29] = sv49[28] * (1 / w[8][0]);
        sv49[30] = -1.0 * sv49[28] * (1 / w[8][0]);
        sv49[31] = sv49[29] * (-2.997 * std::pow(1 + -1 * sv49[6], 2));
        sv49[32] = sv49[30] * (-2.997 * std::pow(1 + -1 * sv49[6], 2));
        sv49[33] = std::pow(1 + sv49[5], -1 + -1 * w[11][0]);
        sv49[34] = sp[107] * sv49[33];
        sv49[35] = std::pow(sv49[4], sp[108]);
        sv49[36] = sv49[34] * sv49[35];
        sv49[37] = sv49[31] * sv49[36];
        sv49[38] = sv49[32] * sv49[36];
        sv49[39] = sp[88] * sv49[37];
        sv49[40] = sp[88] * sv49[38];
        sv49[41] = sp[89] * sv49[37];
        sv49[42] = sp[89] * sv49[38];
        sv49[43] = -1 * sv49[39] + -1 * sv49[20];
        sv49[44] = -1 * sv49[41] + -1 * sv49[21];
        sv49[45] = sv49[0] / w[15][0];
        sv49[46] = std::tanh(sv49[45]);
        sv49[47] = sv49[43] * ((1 + sv49[46]) / 2);
        sv49[48] = sv49[44] * ((1 + sv49[46]) / 2);
        sv49[49] = -1 * sv49[40] * ((1 + sv49[46]) / 2);
        sv49[50] = -1 * sv49[42] * ((1 + sv49[46]) / 2);
        sv49[51] = sv49[24] * ((1 + sv49[46]) / 2);
        sv49[52] = sv49[25] * ((1 + sv49[46]) / 2);
        sv49[53] = sv49[26] * ((1 + sv49[46]) / 2);
        sv49[54] = sv49[27] * ((1 + sv49[46]) / 2);
        sv49[55] = -1 * w[13][0] * sv49[18];
        sv49[56] = sv49[55] * w[7][0];
        sv49[57] = -1 * sp[78] * sv49[56];
        sv49[58] = sv49[57] * sp[113];
        sv49[59] = -1 * sp[84] * sv49[56];
        sv49[60] = sv49[59] * sp[118];
        sv49[61] = sv49[58] + sv49[60];
        sv49[62] = sv49[23] * w[7][0];
        sv49[63] = -1 * sp[3] * sv49[62];
        sv49[64] = -1 * sp[4] * sv49[62];
        sv49[65] = sv49[63] * sp[113];
        sv49[66] = sv49[64] * sp[113];
        sv49[67] = -1 * sp[8] * sv49[62];
        sv49[68] = -1 * sp[7] * sv49[62];
        sv49[69] = sv49[67] * sp[118];
        sv49[70] = sv49[68] * sp[118];
        sv49[71] = sv49[65] + sv49[69];
        sv49[72] = sv49[66] + sv49[70];
        sv49[73] = -2.997 * std::pow(1 + -1 * sv49[6], 2) * sv49[36];
        sv49[74] = -1.0 * (-2.997 * std::pow(1 + -1 * sv49[6], 2)) * sv49[36];
        sv49[75] = sv49[73] / w[8][0];
        sv49[76] = sv49[74] / w[8][0];
        sv49[77] = sv49[22] * sv49[75];
        sv49[78] = sv49[22] * sv49[76];
        sv49[79] = sv49[77] * w[7][0];
        sv49[80] = sv49[78] * w[7][0];
        sv49[81] = -1 * sp[78] * sv49[79];
        sv49[82] = -1 * sp[78] * sv49[80];
        sv49[83] = sv49[81] * sp[113];
        sv49[84] = sv49[82] * sp[113];
        sv49[85] = -1 * sp[84] * sv49[79];
        sv49[86] = -1 * sp[84] * sv49[80];
        sv49[87] = sv49[85] * sp[118];
        sv49[88] = sv49[86] * sp[118];
        sv49[89] = sv49[83] + sv49[87];
        sv49[90] = sv49[84] + sv49[88];
        sv49[91] = sv49[89] + sv49[61];
        sv49[92] = sv49[91] * ((1 + -1 * std::pow(sv49[46], 2)) / 2);
        sv49[93] = sv49[90] * ((1 + -1 * std::pow(sv49[46], 2)) / 2);
        sv49[94] = sv49[71] * ((1 + -1 * std::pow(sv49[46], 2)) / 2);
        sv49[95] = sv49[72] * ((1 + -1 * std::pow(sv49[46], 2)) / 2);
        sv49[96] = -1 * sv49[92] + sv49[17];
        sv49[97] = -1 * sv49[93] + -1.0 * sv49[17];
        sv49[98] = sp[122] * (sv49[1] == 0.0 ? 0.0 : (sv49[1] < 0.0 ? -1 : 1));
        sv49[99] = sp[122] + sv49[98];
        sv49[100] = sv49[99] / 2 / w[10][0];
        sv49[101] = 1 / (1 + -1 * w[11][0]) * sv49[100];
        sv49[102] = std::pow(sv49[4], -1 + 1 / (1 + -1 * w[11][0]));
        sv49[103] = sv49[101] * sv49[102];
        sv49[104] = sv49[103] * (-1 * w[11][0]);
        sv49[105] = sv49[104] * sv49[33];
        sv49[106] = 3 * (-1 * sv49[105]) * std::pow(1 + -1 * sv49[6], 2);
        sv49[107] = sv49[106] / w[8][0];
        sv49[108] = w1_c3 * sv49[107];
        sv49[109] = sp[78] * sv49[18];
        sv49[110] = sv49[108] + sv49[109];
        sv49[111] = sv49[110] * w[7][0];
        sv49[112] = -1 * sp[78] * sv49[111];
        sv49[113] = sp[126] * (sv49[1] == 0.0 ? 0.0 : (sv49[1] < 0.0 ? -1 : 1));
        sv49[114] = sp[126] + sv49[113];
        sv49[115] = sv49[114] / 2 / w[10][0];
        sv49[116] = 1 / (1 + -1 * w[11][0]) * sv49[115];
        sv49[117] = sv49[116] * sv49[102];
        sv49[118] = sv49[117] * (-1 * w[11][0]);
        sv49[119] = sv49[118] * sv49[33];
        sv49[120] = 3 * (-1 * sv49[119]) * std::pow(1 + -1 * sv49[6], 2);
        sv49[121] = sv49[120] / w[8][0];
        sv49[122] = w1_c3 * sv49[121];
        sv49[123] = sp[84] * sv49[18];
        sv49[124] = sv49[122] + sv49[123];
        sv49[125] = sv49[124] * w[7][0];
        sv49[126] = -1 * sp[84] * sv49[125];
        sv49[127] = sv49[112] + sv49[126];
        sv49[128] = (1 + -1 * std::pow(sv49[46], 2)) / 2 * (1.0 / w[15][0]);
        sv49[129] = (1 + -1 * std::pow(sv49[46], 2)) / 2 * (-1.0 / w[15][0]);
        sv49[130] = sv49[128] * w[13][0];
        sv49[131] = sv49[129] * w[13][0];
        sv49[132] = sv49[127] * sv49[130];
        sv49[133] = sv49[127] * sv49[131];
        sv49[134] = sv49[96] + sv49[132];
        sv49[135] = sv49[97] + sv49[133];
        sv49[136] = w1_c2 + -1 * w[14][0];
        sv49[137] = w1_c3 + -1 * sv49[136];
        sv49[138] = (1 + -1 * std::pow(sv49[16], 2)) / 2 * w[16][0];
        sv49[139] = sv49[138] * (1.0 / w[15][0]);
        sv49[140] = sv49[138] * (-1.0 / w[15][0]);
        sv49[141] = sv49[137] * sv49[139];
        sv49[142] = sv49[137] * sv49[140];
        sv49[143] = sv49[134] + sv49[141];
        sv49[144] = sv49[135] + sv49[142];
        sv49[145] = sv49[36] * w[6][0];
        sv49[146] = -1.0 * sv49[36] * w[6][0];
        sv49[147] = sv49[145] * w0;
        sv49[148] = sv49[146] * w0;
        sv49[149] = w12_c0 * sv49[147];
        sv49[150] = w12_c0 * sv49[148];
        sv49[151] = w12_c1 * sv49[147];
        sv49[152] = w12_c1 * sv49[148];
        sv49[153] = std::pow(sv49[6], 3) / w[5][0];
        sv49[154] = sp[139] * sv49[153];
        sv49[155] = sp[140] * sv49[153];
        sv49[156] = sp[141] * sv49[153];
        sv49[157] = sp[142] * sv49[153];
        sv49[158] = w12_c0 * w[6][0];
        sv49[159] = -1 * sp[116] + sv49[158];
        sv49[160] = sv49[159] * w[4][0];
        sv49[161] = sv49[160] * sp[8];
        sv49[162] = sv49[160] * sp[7];
        sv49[163] = w12_c1 * w[6][0];
        sv49[164] = -1 * sp[111] + sv49[163];
        sv49[165] = sv49[164] * w[4][0];
        sv49[166] = sv49[165] * sp[3];
        sv49[167] = sv49[165] * sp[4];
        sv49[168] = sv49[166] + sv49[161];
        sv49[169] = sv49[162] + sv49[167];
        sv49[170] = 3 * std::pow(sv49[6], 2) * sv49[36];
        sv49[171] = -1.0 * sv49[36] * (3 * std::pow(sv49[6], 2));
        sv49[172] = sv49[170] / w[5][0];
        sv49[173] = sv49[171] / w[5][0];
        sv49[174] = sv49[168] * sv49[172];
        sv49[175] = sv49[168] * sv49[173];
        sv49[176] = sv49[169] * sv49[172];
        sv49[177] = sv49[169] * sv49[173];
        sv49[178] = sv49[7] * sp[143];
        sv49[179] = sv49[8] * sp[143];
        sv49[180] = sv49[11] * sp[143];
        sv49[181] = sv49[12] * sp[143];
        sv49[182] = sv49[143] * sp[143];
        sv49[183] = sv49[47] * sp[143];
        sv49[184] = sv49[48] * sp[143];
        sv49[185] = -1 * sv49[149] * sp[143];
        sv49[186] = -1 * sv49[151] * sp[143];
        sv49[187] = sv49[174] * sp[143];
        sv49[188] = sv49[176] * sp[143];
        sv49[189] = sv49[9] * sp[143];
        sv49[190] = sv49[10] * sp[143];
        sv49[191] = sv49[13] * sp[143];
        sv49[192] = sv49[14] * sp[143];
        sv49[193] = sv49[144] * sp[143];
        sv49[194] = sv49[49] * sp[143];
        sv49[195] = sv49[50] * sp[143];
        sv49[196] = -1 * sv49[150] * sp[143];
        sv49[197] = -1 * sv49[152] * sp[143];
        sv49[198] = sv49[175] * sp[143];
        sv49[199] = sv49[177] * sp[143];
        sv49[200] = -1 * sv49[94] * sp[143];
        sv49[201] = -1 * sv49[95] * sp[143];
        sv49[202] = sv49[51] * sp[143];
        sv49[203] = sv49[52] * sp[143];
        sv49[204] = sv49[53] * sp[143];
        sv49[205] = sv49[54] * sp[143];
        sv49[206] = sv49[154] * sp[143];
        sv49[207] = sv49[155] * sp[143];
        sv49[208] = sv49[156] * sp[143];
        sv49[209] = sv49[157] * sp[143];
        const double fw0 = sv49[196] * weights49[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE34_C0_Q49[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF0[i][j] += TF0[i] * FE36_C2_Q49[0][iq][j];
        const double fw1 = sv49[185] * weights49[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE34_C0_Q49[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF1[i][j] += TF1[i] * FE36_C2_Q49[0][iq][j];
        const double fw2 = sv49[189] * weights49[iq];
        alignas(32) double TF2[5];
        for (int i = 0; i < 5; ++i)
            TF2[i] = fw2 * FE34_C0_D10_Q49[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF2[i][j] += TF2[i] * FE36_C2_Q49[0][iq][j];
        const double fw3 = sv49[178] * weights49[iq];
        alignas(32) double TF3[5];
        for (int i = 0; i < 5; ++i)
            TF3[i] = fw3 * FE34_C0_D10_Q49[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF3[i][j] += TF3[i] * FE36_C2_Q49[0][iq][j];
        const double fw4 = sv49[190] * weights49[iq];
        alignas(32) double TF4[5];
        for (int i = 0; i < 5; ++i)
            TF4[i] = fw4 * FE34_C0_D01_Q49[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF4[i][j] += TF4[i] * FE36_C2_Q49[0][iq][j];
        const double fw5 = sv49[179] * weights49[iq];
        alignas(32) double TF5[5];
        for (int i = 0; i < 5; ++i)
            TF5[i] = fw5 * FE34_C0_D01_Q49[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF5[i][j] += TF5[i] * FE36_C2_Q49[0][iq][j];
        const double fw6 = sv49[197] * weights49[iq];
        alignas(32) double TF6[6];
        for (int i = 0; i < 6; ++i)
            TF6[i] = fw6 * FE34_C0_Q49[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF6[i][j] += TF6[i] * FE36_C2_Q49[0][iq][j];
        const double fw7 = sv49[186] * weights49[iq];
        alignas(32) double TF7[6];
        for (int i = 0; i < 6; ++i)
            TF7[i] = fw7 * FE34_C0_Q49[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF7[i][j] += TF7[i] * FE36_C2_Q49[0][iq][j];
        const double fw8 = sv49[192] * weights49[iq];
        alignas(32) double TF8[5];
        for (int i = 0; i < 5; ++i)
            TF8[i] = fw8 * FE34_C0_D10_Q49[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF8[i][j] += TF8[i] * FE36_C2_Q49[0][iq][j];
        const double fw9 = sv49[181] * weights49[iq];
        alignas(32) double TF9[5];
        for (int i = 0; i < 5; ++i)
            TF9[i] = fw9 * FE34_C0_D10_Q49[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF9[i][j] += TF9[i] * FE36_C2_Q49[0][iq][j];
        const double fw10 = sv49[191] * weights49[iq];
        alignas(32) double TF10[5];
        for (int i = 0; i < 5; ++i)
            TF10[i] = fw10 * FE34_C0_D01_Q49[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF10[i][j] += TF10[i] * FE36_C2_Q49[0][iq][j];
        const double fw11 = sv49[180] * weights49[iq];
        alignas(32) double TF11[5];
        for (int i = 0; i < 5; ++i)
            TF11[i] = fw11 * FE34_C0_D01_Q49[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF11[i][j] += TF11[i] * FE36_C2_Q49[0][iq][j];
        const double fw12 = sv49[209] * weights49[iq];
        for (int j = 0; j < 2; ++j)
            TP0[j] += fw12 * FE36_C2_D01_Q49[0][0][j];
        const double fw13 = sv49[199] * weights49[iq];
        for (int j = 0; j < 3; ++j)
            TP1[j] += fw13 * FE36_C2_Q49[0][iq][j];
        const double fw14 = sv49[208] * weights49[iq];
        for (int j = 0; j < 2; ++j)
            TP2[j] += fw14 * FE36_C2_D01_Q49[0][0][j];
        const double fw15 = sv49[188] * weights49[iq];
        for (int j = 0; j < 3; ++j)
            TP3[j] += fw15 * FE36_C2_Q49[0][iq][j];
        const double fw16 = sv49[207] * weights49[iq];
        for (int j = 0; j < 2; ++j)
            TP4[j] += fw16 * FE36_C2_D01_Q49[0][0][j];
        const double fw17 = sv49[198] * weights49[iq];
        for (int j = 0; j < 3; ++j)
            TP5[j] += fw17 * FE36_C2_Q49[0][iq][j];
        const double fw18 = sv49[206] * weights49[iq];
        for (int j = 0; j < 2; ++j)
            TP6[j] += fw18 * FE36_C2_D01_Q49[0][0][j];
        const double fw19 = sv49[187] * weights49[iq];
        for (int j = 0; j < 3; ++j)
            TP7[j] += fw19 * FE36_C2_Q49[0][iq][j];
        const double fw20 = sv49[195] * weights49[iq];
        for (int j = 0; j < 3; ++j)
            TP8[j] += fw20 * FE36_C2_Q49[0][iq][j];
        const double fw21 = sv49[205] * weights49[iq];
        for (int j = 0; j < 2; ++j)
            TP9[j] += fw21 * FE36_C2_D01_Q49[0][0][j];
        const double fw22 = sv49[184] * weights49[iq];
        for (int j = 0; j < 3; ++j)
            TP10[j] += fw22 * FE36_C2_Q49[0][iq][j];
        const double fw23 = sv49[204] * weights49[iq];
        for (int j = 0; j < 2; ++j)
            TP11[j] += fw23 * FE36_C2_D01_Q49[0][0][j];
        const double fw24 = sv49[193] * weights49[iq];
        alignas(32) double TF12[3];
        for (int i = 0; i < 3; ++i)
            TF12[i] = fw24 * FE36_C2_Q49[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF12[i][j] += TF12[i] * FE36_C2_Q49[0][iq][j];
        const double fw25 = sv49[201] * weights49[iq];
        for (int i = 0; i < 3; ++i)
            TP12[i] += fw25 * FE36_C2_Q49[0][iq][i];
        const double fw26 = sv49[182] * weights49[iq];
        alignas(32) double TF13[3];
        for (int i = 0; i < 3; ++i)
            TF13[i] = fw26 * FE36_C2_Q49[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF13[i][j] += TF13[i] * FE36_C2_Q49[0][iq][j];
        const double fw27 = sv49[200] * weights49[iq];
        for (int i = 0; i < 3; ++i)
            TP13[i] += fw27 * FE36_C2_Q49[0][iq][i];
        const double fw28 = sv49[194] * weights49[iq];
        for (int j = 0; j < 3; ++j)
            TP14[j] += fw28 * FE36_C2_Q49[0][iq][j];
        const double fw29 = sv49[203] * weights49[iq];
        for (int j = 0; j < 2; ++j)
            TP15[j] += fw29 * FE36_C2_D01_Q49[0][0][j];
        const double fw30 = sv49[183] * weights49[iq];
        for (int j = 0; j < 3; ++j)
            TP16[j] += fw30 * FE36_C2_Q49[0][iq][j];
        const double fw31 = sv49[202] * weights49[iq];
        for (int j = 0; j < 2; ++j)
            TP17[j] += fw31 * FE36_C2_D01_Q49[0][0][j];
    }
    A[0] = sp[152] * PI0[0][0][0] + sp[156] * PI1[0][0][0] + sp[153] * PI1[0][0][0] + sp[157] * PI2[0][0][0];
    A[1] = sp[152] * PI0[0][0][1] + sp[153] * PI1[0][1][0];
    A[2] = sp[156] * PI1[0][0][1] + sp[157] * PI2[0][0][1];
    A[3] = sp[152] * PI0[0][0][2] + sp[156] * PI1[0][0][2] + sp[153] * PI1[0][2][0] + sp[157] * PI2[0][0][2];
    A[4] = sp[152] * PI0[0][0][3] + sp[156] * PI1[0][0][3] + sp[153] * PI1[0][3][0] + sp[157] * PI2[0][0][3];
    A[5] = sp[152] * PI0[0][0][4] + sp[156] * PI1[0][0][4] + sp[153] * PI1[0][4][0] + sp[157] * PI2[0][0][4];
    A[6] = sp[148] * PI0[0][0][0] + sp[144] * PI1[0][0][0] + sp[149] * PI1[0][0][0] + sp[145] * PI2[0][0][0];
    A[7] = sp[148] * PI0[0][0][1] + sp[149] * PI1[0][1][0];
    A[8] = sp[144] * PI1[0][0][1] + sp[145] * PI2[0][0][1];
    A[9] = sp[148] * PI0[0][0][2] + sp[144] * PI1[0][0][2] + sp[149] * PI1[0][2][0] + sp[145] * PI2[0][0][2];
    A[10] = sp[148] * PI0[0][0][3] + sp[144] * PI1[0][0][3] + sp[149] * PI1[0][3][0] + sp[145] * PI2[0][0][3];
    A[11] = sp[148] * PI0[0][0][4] + sp[144] * PI1[0][0][4] + sp[149] * PI1[0][4][0] + sp[145] * PI2[0][0][4];
    std::fill(A + 12, A + 18, 0.0);
    A[18] = sp[152] * PI0[0][1][0] + sp[156] * PI1[0][1][0];
    A[19] = sp[152] * PI0[0][1][1];
    A[20] = sp[156] * PI1[0][1][1];
    A[21] = sp[152] * PI0[0][1][2] + sp[156] * PI1[0][1][2];
    A[22] = sp[152] * PI0[0][1][3] + sp[156] * PI1[0][1][3];
    A[23] = sp[152] * PI0[0][1][4] + sp[156] * PI1[0][1][4];
    A[24] = sp[148] * PI0[0][1][0] + sp[144] * PI1[0][1][0];
    A[25] = sp[148] * PI0[0][1][1];
    A[26] = sp[144] * PI1[0][1][1];
    A[27] = sp[148] * PI0[0][1][2] + sp[144] * PI1[0][1][2];
    A[28] = sp[148] * PI0[0][1][3] + sp[144] * PI1[0][1][3];
    A[29] = sp[148] * PI0[0][1][4] + sp[144] * PI1[0][1][4];
    std::fill(A + 30, A + 36, 0.0);
    A[36] = sp[153] * PI1[0][0][1] + sp[157] * PI2[0][1][0];
    A[37] = sp[153] * PI1[0][1][1];
    A[38] = sp[157] * PI2[0][1][1];
    A[39] = sp[153] * PI1[0][2][1] + sp[157] * PI2[0][1][2];
    A[40] = sp[153] * PI1[0][3][1] + sp[157] * PI2[0][1][3];
    A[41] = sp[153] * PI1[0][4][1] + sp[157] * PI2[0][1][4];
    A[42] = sp[149] * PI1[0][0][1] + sp[145] * PI2[0][1][0];
    A[43] = sp[149] * PI1[0][1][1];
    A[44] = sp[145] * PI2[0][1][1];
    A[45] = sp[149] * PI1[0][2][1] + sp[145] * PI2[0][1][2];
    A[46] = sp[149] * PI1[0][3][1] + sp[145] * PI2[0][1][3];
    A[47] = sp[149] * PI1[0][4][1] + sp[145] * PI2[0][1][4];
    std::fill(A + 48, A + 54, 0.0);
    A[54] = sp[152] * PI0[0][2][0] + sp[156] * PI1[0][2][0] + sp[153] * PI1[0][0][2] + sp[157] * PI2[0][2][0];
    A[55] = sp[152] * PI0[0][2][1] + sp[153] * PI1[0][1][2];
    A[56] = sp[156] * PI1[0][2][1] + sp[157] * PI2[0][2][1];
    A[57] = sp[152] * PI0[0][2][2] + sp[156] * PI1[0][2][2] + sp[153] * PI1[0][2][2] + sp[157] * PI2[0][2][2];
    A[58] = sp[152] * PI0[0][2][3] + sp[156] * PI1[0][2][3] + sp[153] * PI1[0][3][2] + sp[157] * PI2[0][2][3];
    A[59] = sp[152] * PI0[0][2][4] + sp[156] * PI1[0][2][4] + sp[153] * PI1[0][4][2] + sp[157] * PI2[0][2][4];
    A[60] = sp[148] * PI0[0][2][0] + sp[144] * PI1[0][2][0] + sp[149] * PI1[0][0][2] + sp[145] * PI2[0][2][0];
    A[61] = sp[148] * PI0[0][2][1] + sp[149] * PI1[0][1][2];
    A[62] = sp[144] * PI1[0][2][1] + sp[145] * PI2[0][2][1];
    A[63] = sp[148] * PI0[0][2][2] + sp[144] * PI1[0][2][2] + sp[149] * PI1[0][2][2] + sp[145] * PI2[0][2][2];
    A[64] = sp[148] * PI0[0][2][3] + sp[144] * PI1[0][2][3] + sp[149] * PI1[0][3][2] + sp[145] * PI2[0][2][3];
    A[65] = sp[148] * PI0[0][2][4] + sp[144] * PI1[0][2][4] + sp[149] * PI1[0][4][2] + sp[145] * PI2[0][2][4];
    std::fill(A + 66, A + 72, 0.0);
    A[72] = sp[152] * PI0[0][3][0] + sp[156] * PI1[0][3][0] + sp[153] * PI1[0][0][3] + sp[157] * PI2[0][3][0];
    A[73] = sp[152] * PI0[0][3][1] + sp[153] * PI1[0][1][3];
    A[74] = sp[156] * PI1[0][3][1] + sp[157] * PI2[0][3][1];
    A[75] = sp[152] * PI0[0][3][2] + sp[156] * PI1[0][3][2] + sp[153] * PI1[0][2][3] + sp[157] * PI2[0][3][2];
    A[76] = sp[152] * PI0[0][3][3] + sp[156] * PI1[0][3][3] + sp[153] * PI1[0][3][3] + sp[157] * PI2[0][3][3];
    A[77] = sp[152] * PI0[0][3][4] + sp[156] * PI1[0][3][4] + sp[153] * PI1[0][4][3] + sp[157] * PI2[0][3][4];
    A[78] = sp[148] * PI0[0][3][0] + sp[144] * PI1[0][3][0] + sp[149] * PI1[0][0][3] + sp[145] * PI2[0][3][0];
    A[79] = sp[148] * PI0[0][3][1] + sp[149] * PI1[0][1][3];
    A[80] = sp[144] * PI1[0][3][1] + sp[145] * PI2[0][3][1];
    A[81] = sp[148] * PI0[0][3][2] + sp[144] * PI1[0][3][2] + sp[149] * PI1[0][2][3] + sp[145] * PI2[0][3][2];
    A[82] = sp[148] * PI0[0][3][3] + sp[144] * PI1[0][3][3] + sp[149] * PI1[0][3][3] + sp[145] * PI2[0][3][3];
    A[83] = sp[148] * PI0[0][3][4] + sp[144] * PI1[0][3][4] + sp[149] * PI1[0][4][3] + sp[145] * PI2[0][3][4];
    std::fill(A + 84, A + 90, 0.0);
    A[90] = sp[152] * PI0[0][4][0] + sp[156] * PI1[0][4][0] + sp[153] * PI1[0][0][4] + sp[157] * PI2[0][4][0];
    A[91] = sp[152] * PI0[0][4][1] + sp[153] * PI1[0][1][4];
    A[92] = sp[156] * PI1[0][4][1] + sp[157] * PI2[0][4][1];
    A[93] = sp[152] * PI0[0][4][2] + sp[156] * PI1[0][4][2] + sp[153] * PI1[0][2][4] + sp[157] * PI2[0][4][2];
    A[94] = sp[152] * PI0[0][4][3] + sp[156] * PI1[0][4][3] + sp[153] * PI1[0][3][4] + sp[157] * PI2[0][4][3];
    A[95] = sp[152] * PI0[0][4][4] + sp[156] * PI1[0][4][4] + sp[153] * PI1[0][4][4] + sp[157] * PI2[0][4][4];
    A[96] = sp[148] * PI0[0][4][0] + sp[144] * PI1[0][4][0] + sp[149] * PI1[0][0][4] + sp[145] * PI2[0][4][0];
    A[97] = sp[148] * PI0[0][4][1] + sp[149] * PI1[0][1][4];
    A[98] = sp[144] * PI1[0][4][1] + sp[145] * PI2[0][4][1];
    A[99] = sp[148] * PI0[0][4][2] + sp[144] * PI1[0][4][2] + sp[149] * PI1[0][2][4] + sp[145] * PI2[0][4][2];
    A[100] = sp[148] * PI0[0][4][3] + sp[144] * PI1[0][4][3] + sp[149] * PI1[0][3][4] + sp[145] * PI2[0][4][3];
    A[101] = sp[148] * PI0[0][4][4] + sp[144] * PI1[0][4][4] + sp[149] * PI1[0][4][4] + sp[145] * PI2[0][4][4];
    std::fill(A + 102, A + 108, 0.0);
    A[108] = sp[155] * PI0[0][0][0] + sp[159] * PI1[0][0][0] + sp[154] * PI1[0][0][0] + sp[158] * PI2[0][0][0];
    A[109] = sp[155] * PI0[0][0][1] + sp[154] * PI1[0][1][0];
    A[110] = sp[159] * PI1[0][0][1] + sp[158] * PI2[0][0][1];
    A[111] = sp[155] * PI0[0][0][2] + sp[159] * PI1[0][0][2] + sp[154] * PI1[0][2][0] + sp[158] * PI2[0][0][2];
    A[112] = sp[155] * PI0[0][0][3] + sp[159] * PI1[0][0][3] + sp[154] * PI1[0][3][0] + sp[158] * PI2[0][0][3];
    A[113] = sp[155] * PI0[0][0][4] + sp[159] * PI1[0][0][4] + sp[154] * PI1[0][4][0] + sp[158] * PI2[0][0][4];
    A[114] = sp[151] * PI0[0][0][0] + sp[147] * PI1[0][0][0] + sp[150] * PI1[0][0][0] + sp[146] * PI2[0][0][0];
    A[115] = sp[151] * PI0[0][0][1] + sp[150] * PI1[0][1][0];
    A[116] = sp[147] * PI1[0][0][1] + sp[146] * PI2[0][0][1];
    A[117] = sp[151] * PI0[0][0][2] + sp[147] * PI1[0][0][2] + sp[150] * PI1[0][2][0] + sp[146] * PI2[0][0][2];
    A[118] = sp[151] * PI0[0][0][3] + sp[147] * PI1[0][0][3] + sp[150] * PI1[0][3][0] + sp[146] * PI2[0][0][3];
    A[119] = sp[151] * PI0[0][0][4] + sp[147] * PI1[0][0][4] + sp[150] * PI1[0][4][0] + sp[146] * PI2[0][0][4];
    std::fill(A + 120, A + 126, 0.0);
    A[126] = sp[155] * PI0[0][1][0] + sp[159] * PI1[0][1][0];
    A[127] = sp[155] * PI0[0][1][1];
    A[128] = sp[159] * PI1[0][1][1];
    A[129] = sp[155] * PI0[0][1][2] + sp[159] * PI1[0][1][2];
    A[130] = sp[155] * PI0[0][1][3] + sp[159] * PI1[0][1][3];
    A[131] = sp[155] * PI0[0][1][4] + sp[159] * PI1[0][1][4];
    A[132] = sp[151] * PI0[0][1][0] + sp[147] * PI1[0][1][0];
    A[133] = sp[151] * PI0[0][1][1];
    A[134] = sp[147] * PI1[0][1][1];
    A[135] = sp[151] * PI0[0][1][2] + sp[147] * PI1[0][1][2];
    A[136] = sp[151] * PI0[0][1][3] + sp[147] * PI1[0][1][3];
    A[137] = sp[151] * PI0[0][1][4] + sp[147] * PI1[0][1][4];
    std::fill(A + 138, A + 144, 0.0);
    A[144] = sp[154] * PI1[0][0][1] + sp[158] * PI2[0][1][0];
    A[145] = sp[154] * PI1[0][1][1];
    A[146] = sp[158] * PI2[0][1][1];
    A[147] = sp[154] * PI1[0][2][1] + sp[158] * PI2[0][1][2];
    A[148] = sp[154] * PI1[0][3][1] + sp[158] * PI2[0][1][3];
    A[149] = sp[154] * PI1[0][4][1] + sp[158] * PI2[0][1][4];
    A[150] = sp[150] * PI1[0][0][1] + sp[146] * PI2[0][1][0];
    A[151] = sp[150] * PI1[0][1][1];
    A[152] = sp[146] * PI2[0][1][1];
    A[153] = sp[150] * PI1[0][2][1] + sp[146] * PI2[0][1][2];
    A[154] = sp[150] * PI1[0][3][1] + sp[146] * PI2[0][1][3];
    A[155] = sp[150] * PI1[0][4][1] + sp[146] * PI2[0][1][4];
    std::fill(A + 156, A + 162, 0.0);
    A[162] = sp[155] * PI0[0][2][0] + sp[159] * PI1[0][2][0] + sp[154] * PI1[0][0][2] + sp[158] * PI2[0][2][0];
    A[163] = sp[155] * PI0[0][2][1] + sp[154] * PI1[0][1][2];
    A[164] = sp[159] * PI1[0][2][1] + sp[158] * PI2[0][2][1];
    A[165] = sp[155] * PI0[0][2][2] + sp[159] * PI1[0][2][2] + sp[154] * PI1[0][2][2] + sp[158] * PI2[0][2][2];
    A[166] = sp[155] * PI0[0][2][3] + sp[159] * PI1[0][2][3] + sp[154] * PI1[0][3][2] + sp[158] * PI2[0][2][3];
    A[167] = sp[155] * PI0[0][2][4] + sp[159] * PI1[0][2][4] + sp[154] * PI1[0][4][2] + sp[158] * PI2[0][2][4];
    A[168] = sp[151] * PI0[0][2][0] + sp[147] * PI1[0][2][0] + sp[150] * PI1[0][0][2] + sp[146] * PI2[0][2][0];
    A[169] = sp[151] * PI0[0][2][1] + sp[150] * PI1[0][1][2];
    A[170] = sp[147] * PI1[0][2][1] + sp[146] * PI2[0][2][1];
    A[171] = sp[151] * PI0[0][2][2] + sp[147] * PI1[0][2][2] + sp[150] * PI1[0][2][2] + sp[146] * PI2[0][2][2];
    A[172] = sp[151] * PI0[0][2][3] + sp[147] * PI1[0][2][3] + sp[150] * PI1[0][3][2] + sp[146] * PI2[0][2][3];
    A[173] = sp[151] * PI0[0][2][4] + sp[147] * PI1[0][2][4] + sp[150] * PI1[0][4][2] + sp[146] * PI2[0][2][4];
    std::fill(A + 174, A + 180, 0.0);
    A[180] = sp[155] * PI0[0][3][0] + sp[159] * PI1[0][3][0] + sp[154] * PI1[0][0][3] + sp[158] * PI2[0][3][0];
    A[181] = sp[155] * PI0[0][3][1] + sp[154] * PI1[0][1][3];
    A[182] = sp[159] * PI1[0][3][1] + sp[158] * PI2[0][3][1];
    A[183] = sp[155] * PI0[0][3][2] + sp[159] * PI1[0][3][2] + sp[154] * PI1[0][2][3] + sp[158] * PI2[0][3][2];
    A[184] = sp[155] * PI0[0][3][3] + sp[159] * PI1[0][3][3] + sp[154] * PI1[0][3][3] + sp[158] * PI2[0][3][3];
    A[185] = sp[155] * PI0[0][3][4] + sp[159] * PI1[0][3][4] + sp[154] * PI1[0][4][3] + sp[158] * PI2[0][3][4];
    A[186] = sp[151] * PI0[0][3][0] + sp[147] * PI1[0][3][0] + sp[150] * PI1[0][0][3] + sp[146] * PI2[0][3][0];
    A[187] = sp[151] * PI0[0][3][1] + sp[150] * PI1[0][1][3];
    A[188] = sp[147] * PI1[0][3][1] + sp[146] * PI2[0][3][1];
    A[189] = sp[151] * PI0[0][3][2] + sp[147] * PI1[0][3][2] + sp[150] * PI1[0][2][3] + sp[146] * PI2[0][3][2];
    A[190] = sp[151] * PI0[0][3][3] + sp[147] * PI1[0][3][3] + sp[150] * PI1[0][3][3] + sp[146] * PI2[0][3][3];
    A[191] = sp[151] * PI0[0][3][4] + sp[147] * PI1[0][3][4] + sp[150] * PI1[0][4][3] + sp[146] * PI2[0][3][4];
    std::fill(A + 192, A + 198, 0.0);
    A[198] = sp[155] * PI0[0][4][0] + sp[159] * PI1[0][4][0] + sp[154] * PI1[0][0][4] + sp[158] * PI2[0][4][0];
    A[199] = sp[155] * PI0[0][4][1] + sp[154] * PI1[0][1][4];
    A[200] = sp[159] * PI1[0][4][1] + sp[158] * PI2[0][4][1];
    A[201] = sp[155] * PI0[0][4][2] + sp[159] * PI1[0][4][2] + sp[154] * PI1[0][2][4] + sp[158] * PI2[0][4][2];
    A[202] = sp[155] * PI0[0][4][3] + sp[159] * PI1[0][4][3] + sp[154] * PI1[0][3][4] + sp[158] * PI2[0][4][3];
    A[203] = sp[155] * PI0[0][4][4] + sp[159] * PI1[0][4][4] + sp[154] * PI1[0][4][4] + sp[158] * PI2[0][4][4];
    A[204] = sp[151] * PI0[0][4][0] + sp[147] * PI1[0][4][0] + sp[150] * PI1[0][0][4] + sp[146] * PI2[0][4][0];
    A[205] = sp[151] * PI0[0][4][1] + sp[150] * PI1[0][1][4];
    A[206] = sp[147] * PI1[0][4][1] + sp[146] * PI2[0][4][1];
    A[207] = sp[151] * PI0[0][4][2] + sp[147] * PI1[0][4][2] + sp[150] * PI1[0][2][4] + sp[146] * PI2[0][4][2];
    A[208] = sp[151] * PI0[0][4][3] + sp[147] * PI1[0][4][3] + sp[150] * PI1[0][3][4] + sp[146] * PI2[0][4][3];
    A[209] = sp[151] * PI0[0][4][4] + sp[147] * PI1[0][4][4] + sp[150] * PI1[0][4][4] + sp[146] * PI2[0][4][4];
    std::fill(A + 210, A + 324, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    static const int DM4[2] = { 12, 14 };
    static const int DM5[2] = { 15, 17 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * i + (j + 12)] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * i + (j + 15)] += BF1[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * DM0[i] + (j + 12)] += BF2[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * DM0[i] + (j + 15)] += BF3[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * DM1[i] + (j + 12)] += BF4[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * DM1[i] + (j + 15)] += BF5[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * (i + 6) + (j + 12)] += BF6[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * (i + 6) + (j + 15)] += BF7[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * DM2[i] + (j + 12)] += BF8[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * DM2[i] + (j + 15)] += BF9[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * DM3[i] + (j + 12)] += BF10[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * DM3[i] + (j + 15)] += BF11[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[18 * (i + 12) + (j + 12)] += FE36_C2_D01_Q49[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * (i + 12) + (j + 12)] += FE36_C2_D01_Q49[0][0][i] * TP1[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[18 * (i + 12) + DM4[j]] += FE36_C2_D01_Q49[0][0][i] * TP2[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * (i + 12) + (j + 15)] += FE36_C2_D01_Q49[0][0][i] * TP3[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[18 * DM4[i] + (j + 12)] += FE36_C2_D01_Q49[0][0][i] * TP4[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * DM4[i] + (j + 12)] += FE36_C2_D01_Q49[0][0][i] * TP5[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[18 * DM4[i] + DM4[j]] += FE36_C2_D01_Q49[0][0][i] * TP6[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * DM4[i] + (j + 15)] += FE36_C2_D01_Q49[0][0][i] * TP7[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * (i + 15) + (j + 12)] += FE36_C2_D01_Q49[0][0][i] * TP8[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[18 * (i + 15) + (j + 15)] += FE36_C2_D01_Q49[0][0][i] * TP9[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * (i + 15) + (j + 15)] += FE36_C2_D01_Q49[0][0][i] * TP10[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[18 * (i + 15) + DM5[j]] += FE36_C2_D01_Q49[0][0][i] * TP11[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * (i + 15) + (j + 12)] += BF12[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[18 * (i + 15) + (j + 15)] += FE36_C2_D01_Q49[0][0][j] * TP12[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * (i + 15) + (j + 15)] += BF13[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[18 * (i + 15) + DM5[j]] += FE36_C2_D01_Q49[0][0][j] * TP13[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * DM5[i] + (j + 12)] += FE36_C2_D01_Q49[0][0][i] * TP14[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[18 * DM5[i] + (j + 15)] += FE36_C2_D01_Q49[0][0][i] * TP15[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[18 * DM5[i] + (j + 15)] += FE36_C2_D01_Q49[0][0][i] * TP16[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[18 * DM5[i] + DM5[j]] += FE36_C2_D01_Q49[0][0][i] * TP17[j];
  }

};


class initialnewton2d_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  initialnewton2d_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~initialnewton2d_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 13
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 32
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           13
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights49[49] = { 0.003623466079725794, 0.00715464377909615, 0.008247603013529583, 0.006935542753734078, 0.004297910087982426, 0.001774485071438052, 0.0003375907567113747, 0.007827186648495099, 0.01545501766273407, 0.01781596040067579, 0.01498172921938941, 0.009284078756888543, 0.003833132573484685, 0.000729242610651565, 0.01068501060131498, 0.02109787781815244, 0.02432083637489712, 0.02045178462250981, 0.0126738360020928, 0.005232667115687635, 0.0009955000916249657, 0.01169603676441937, 0.02309417967090931, 0.02662209772138336, 0.02238695250460707, 0.01387304677156393, 0.005727787200652747, 0.001089695284831587, 0.01068501060131498, 0.02109787781815245, 0.02432083637489713, 0.02045178462250982, 0.0126738360020928, 0.005232667115687637, 0.0009955000916249662, 0.007827186648495099, 0.01545501766273407, 0.01781596040067579, 0.01498172921938941, 0.009284078756888543, 0.003833132573484685, 0.000729242610651565, 0.003623466079725802, 0.007154643779096167, 0.008247603013529604, 0.006935542753734095, 0.004297910087982437, 0.001774485071438057, 0.0003375907567113755 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE27_C0_D01_Q49[1][49][5] =
        { { { -2.810586324740912, -0.9100824542451502, 0.09949612950423231, 3.720668778986065, -0.09949612950424026 },
            { -2.451172124893734, -0.5412837873563827, 0.09011166246264335, 2.99245591225012, -0.09011166246265255 },
            { -1.862109731466276, 0.06315929113835896, 0.07473097739536029, 1.798950440327921, -0.07473097739537006 },
            { -1.132922924695843, 0.8113854946777803, 0.05569158062637229, 0.3215374300180672, -0.05569158062638371 },
            { -0.3746072524258175, 1.589501131547323, 0.03589161602685307, -1.2148938791215, -0.03589161602686611 },
            { 0.2973828832189765, 2.279037233052433, 0.01834565016653565, -2.576420116271403, -0.01834565016655054 },
            { 0.7806763961776377, 2.774949757852314, 0.005726638325313418, -3.555626154029944, -0.005726638325329759 },
            { -2.404765266166478, -0.9100824542451501, 0.5053171880786661, 3.314847720411632, -0.5053171880786754 },
            { -2.083628076369342, -0.5412837873563827, 0.4576557109870347, 2.624911863725729, -0.4576557109870443 },
            { -1.557299840810196, 0.06315929113835927, 0.3795408680514404, 1.494140549671841, -0.3795408680514511 },
            { -0.9057702071369256, 0.8113854946777804, 0.2828442981852892, 0.09438471245915019, -0.282844298185301 },
            { -0.2282138833315043, 1.589501131547323, 0.1822849851211657, -1.361287248215813, -0.1822849851211792 },
            { 0.3722104288523841, 2.279037233052433, 0.09317319579994297, -2.65124766190481, -0.09317319579995809 },
            { 0.8040339924865469, 2.774949757852314, 0.02908423463422307, -3.578983750338853, -0.02908423463423908 },
            { -1.748485229893193, -0.91008245424515, 1.16159722435195, 2.658567684138348, -1.161597224351961 },
            { -1.489248321053183, -0.5412837873563824, 1.052035466303193, 2.03053210840957, -1.052035466303204 },
            { -1.064371635460454, 0.06315929113835927, 0.8724690734011817, 1.0012123443221, -0.8724690734011935 },
            { -0.538426545270748, 0.8113854946777804, 0.650187960051466, -0.2729589494070267, -0.6501879600514787 },
            { 0.008528502381242828, 1.589501131547324, 0.4190273708339124, -1.59802963392856, -0.4190273708339264 },
            { 0.4932189948815581, 2.279037233052433, 0.2141817618291165, -2.772256227933984, -0.214181761829132 },
            { 0.8418071041301761, 2.774949757852314, 0.06685734627785214, -3.616756861982482, -0.06685734627786814 },
            { -0.9550412271225792, -0.9100824542451497, 1.955041227122563, 1.865123681367735, -1.955041227122576 },
            { -0.7706418936781961, -0.5412837873563825, 1.770641893678179, 1.311925681034585, -1.770641893678192 },
            { -0.4684203544308257, 0.06315929113835934, 1.468420354430809, 0.4052610632924725, -1.468420354430822 },
            { -0.09430725266111564, 0.8113854946777805, 1.094307252661098, -0.7170782420166586, -1.094307252661111 },
            { 0.2947505657736552, 1.589501131547324, 0.7052494342263244, -1.884251697320972, -0.7052494342263389 },
            { 0.6395186165262097, 2.279037233052433, 0.3604813834737681, -2.918555849578635, -0.3604813834737837 },
            { 0.8874748789261502, 2.774949757852314, 0.1125251210738261, -3.662424636778456, -0.1125251210738423 },
            { -0.1615972243519661, -0.9100824542451499, 2.748485229893175, 1.071679678597123, -2.74848522989319 },
            { -0.0520354663032098, -0.5412837873563825, 2.489248321053164, 0.5933192536595991, -2.48924832105318 },
            { 0.127530926598802, 0.06315929113835934, 2.064371635460435, -0.1906902177371543, -2.06437163546045 },
            { 0.3498120399485162, 0.8113854946777804, 1.538426545270729, -1.16119753462629, -1.538426545270743 },
            { 0.5809726291660676, 1.589501131547323, 0.9914714976187361, -2.170473760713384, -0.9914714976187511 },
            { 0.7858182381708615, 2.279037233052433, 0.5067810051184195, -3.064855471223287, -0.5067810051184353 },
            { 0.9331426537221245, 2.774949757852314, 0.1581928958698005, -3.708092411574431, -0.1581928958698165 },
            { 0.4946828119213179, -0.9100824542451498, 3.404765266166458, 0.4153996423238396, -3.404765266166475 },
            { 0.5423442890129496, -0.5412837873563821, 3.083628076369323, -0.00106050165655953, -3.08362807636934 },
            { 0.6204591319485436, 0.06315929113835934, 2.557299840810177, -0.6836184230868954, -2.557299840810193 },
            { 0.7171557018146937, 0.8113854946777805, 1.905770207136905, -1.528541196492467, -1.905770207136921 },
            { 0.8177150148788148, 1.589501131547324, 1.228213883331482, -2.407216146426131, -1.228213883331498 },
            { 0.9068268042000354, 2.279037233052433, 0.6277895711475935, -3.185864037252461, -0.627789571147609 },
            { 0.9709157653657534, 2.774949757852314, 0.1959660075134291, -3.745865523218059, -0.1959660075134456 },
            { 0.9005038704957511, -0.9100824542451497, 3.810586324740891, 0.009578583749407217, -3.81058632474091 },
            { 0.9098883375373397, -0.5412837873563823, 3.451172124893713, -0.3686045501809489, -3.451172124893731 },
            { 0.9252690226046234, 0.06315929113835934, 2.862109731466256, -0.9884283137429746, -2.862109731466273 },
            { 0.9443084193736098, 0.8113854946777805, 2.132922924695821, -1.755693914051383, -2.132922924695837 },
            { 0.9641083839731274, 1.589501131547324, 1.374607252425795, -2.553609515520443, -1.374607252425811 },
            { 0.9816543498334428, 2.279037233052433, 0.7026171167810004, -3.260691582885868, -0.7026171167810166 },
            { 0.9942733616746626, 2.774949757852314, 0.2193236038223383, -3.769223119526969, -0.2193236038223548 } } };
    alignas(32) static const double FE27_C0_D10_Q49[1][49][5] =
        { { { -2.810586324740908, -0.900503870495761, 0.08991754575484795, -0.08991754575484795, 3.711090195236669 },
            { -2.451172124893729, -0.9098883375373485, 0.4587162126436152, -0.4587162126436152, 3.361060462431078 },
            { -1.862109731466272, -0.9252690226046308, 1.063159291138356, -1.063159291138356, 2.787378754070903 },
            { -1.132922924695838, -0.944308419373617, 1.811385494677777, -1.811385494677777, 2.077231344069455 },
            { -0.3746072524258124, -0.9641083839731338, 2.589501131547318, -2.589501131547318, 1.338715636398947 },
            { 0.297382883218981, -0.9816543498334493, 3.279037233052426, -3.279037233052426, 0.6842714666144688 },
            { 0.7806763961776416, -0.9942733616746693, 3.774949757852304, -3.774949757852304, 0.213596965497028 },
            { -2.404765266166474, -0.4946828119213267, 0.08991754575484825, -0.08991754575484825, 2.899448078087801 },
            { -2.083628076369338, -0.5423442890129571, 0.4587162126436155, -0.4587162126436155, 2.625972365382295 },
            { -1.557299840810191, -0.6204591319485502, 1.063159291138356, -1.063159291138356, 2.177758972758742 },
            { -0.9057702071369206, -0.7171557018146996, 1.811385494677777, -1.811385494677777, 1.62292590895162 },
            { -0.2282138833314995, -0.8177150148788208, 2.589501131547318, -2.589501131547318, 1.045928898210321 },
            { 0.3722104288523886, -0.9068268042000419, 3.279037233052426, -3.279037233052426, 0.5346163753476536 },
            { 0.8040339924865511, -0.9709157653657602, 3.774949757852305, -3.774949757852305, 0.1668817728792096 },
            { -1.748485229893189, 0.1615972243519586, 0.08991754575484837, -0.08991754575484837, 1.58688800554123 },
            { -1.489248321053178, 0.05203546630320229, 0.4587162126436154, -0.4587162126436154, 1.437212854749976 },
            { -1.064371635460449, -0.1275309265988078, 1.063159291138356, -1.063159291138356, 1.191902562059257 },
            { -0.5384265452707427, -0.3498120399485219, 1.811385494677776, -1.811385494677776, 0.888238585219265 },
            { 0.008528502381247879, -0.5809726291660736, 2.589501131547318, -2.589501131547318, 0.572444126784826 },
            { 0.4932189948815626, -0.7858182381708678, 3.279037233052426, -3.279037233052426, 0.2925992432893055 },
            { 0.8418071041301801, -0.9331426537221311, 3.774949757852305, -3.774949757852305, 0.09133554959195143 },
            { -0.9550412271225739, 0.9550412271225732, 0.08991754575484862, -0.08991754575484862, 0.0 },
            { -0.7706418936781908, 0.7706418936781904, 0.4587162126436156, -0.4587162126436156, 0.0 },
            { -0.4684203544308203, 0.4684203544308205, 1.063159291138356, -1.063159291138356, 0.0 },
            { -0.09430725266111019, 0.09430725266111048, 1.811385494677776, -1.811385494677776, 0.0 },
            { 0.2947505657736605, -0.294750565773661, 2.589501131547317, -2.589501131547317, 0.0 },
            { 0.6395186165262142, -0.639518616526216, 3.279037233052425, -3.279037233052425, 0.0 },
            { 0.8874748789261543, -0.887474878926157, 3.774949757852305, -3.774949757852305, 0.0 },
            { -0.1615972243519597, 1.748485229893188, 0.08991754575484875, -0.08991754575484875, -1.586888005541228 },
            { -0.05203546630320351, 1.489248321053178, 0.4587162126436156, -0.4587162126436156, -1.437212854749974 },
            { 0.1275309265988084, 1.064371635460449, 1.063159291138356, -1.063159291138356, -1.191902562059257 },
            { 0.3498120399485224, 0.5384265452707429, 1.811385494677776, -1.811385494677776, -0.8882385852192649 },
            { 0.5809726291660733, -0.008528502381248526, 2.589501131547317, -2.589501131547317, -0.5724441267848244 },
            { 0.7858182381708664, -0.4932189948815644, 3.279037233052425, -3.279037233052425, -0.2925992432893016 },
            { 0.9331426537221285, -0.8418071041301828, 3.774949757852305, -3.774949757852305, -0.09133554959194533 },
            { 0.494682811921326, 2.404765266166474, 0.08991754575484887, -0.08991754575484887, -2.899448078087799 },
            { 0.5423442890129571, 2.083628076369338, 0.4587162126436157, -0.4587162126436157, -2.625972365382295 },
            { 0.6204591319485511, 1.557299840810192, 1.063159291138356, -1.063159291138356, -2.177758972758743 },
            { 0.7171557018147002, 0.9057702071369205, 1.811385494677776, -1.811385494677776, -1.622925908951621 },
            { 0.8177150148788205, 0.2282138833314986, 2.589501131547317, -2.589501131547317, -1.045928898210319 },
            { 0.9068268042000404, -0.3722104288523904, 3.279037233052425, -3.279037233052425, -0.5346163753476496 },
            { 0.9709157653657576, -0.8040339924865536, 3.774949757852305, -3.774949757852305, -0.1668817728792035 },
            { 0.9005038704957602, 2.810586324740908, 0.08991754575484895, -0.08991754575484895, -3.711090195236668 },
            { 0.9098883375373484, 2.45117212489373, 0.4587162126436156, -0.4587162126436156, -3.361060462431078 },
            { 0.9252690226046316, 1.862109731466272, 1.063159291138356, -1.063159291138356, -2.787378754070904 },
            { 0.944308419373617, 1.132922924695837, 1.811385494677776, -1.811385494677776, -2.077231344069454 },
            { 0.9641083839731334, 0.3746072524258114, 2.589501131547317, -2.589501131547317, -1.338715636398945 },
            { 0.981654349833448, -0.297382883218983, 3.279037233052425, -3.279037233052425, -0.6842714666144648 },
            { 0.9942733616746667, -0.7806763961776446, 3.774949757852305, -3.774949757852305, -0.2135969654970219 } } };
    alignas(32) static const double FE27_C0_Q49[1][49][6] =
        { { { 0.8624244361025749, -0.02363659740277002, -0.02146874080939055, 0.002236611944281942, 0.08565964255192414, 0.09478464761337956 },
            { 0.6260305982320046, -0.02151290165169063, -0.08837648269314125, 0.01033392012997215, 0.3957771515781187, 0.07774771440473618 },
            { 0.3084315815026736, -0.01798465447603435, -0.1245013629928625, 0.01986273323843486, 0.7607196383164689, 0.05347206441131927 },
            { 0.03543929416267128, -0.01353520113751297, -0.04270669737831205, 0.0252197303305776, 0.9658864117649357, 0.0296964622576404 },
            { -0.1074586758037479, -0.008811877994089196, 0.1908142308987769, 0.02323534507865832, 0.8898867588974482, 0.01233421892295345 },
            { -0.1139454275960456, -0.004544342181633655, 0.5242513387049099, 0.01503901749016921, 0.5759769216262262, 0.00322249195637405 },
            { -0.04881804555638587, -0.00142756028301928, 0.8375432698255753, 0.005404442989879767, 0.2069838962851253, 0.0003139967388248929 },
            { 0.5978619981700886, -0.09441111444870158, -0.02146874080939055, 0.01135922034494406, 0.07653703415126197, 0.4301216025917975 },
            { 0.4176882450793233, -0.08823283402187905, -0.08837648269314125, 0.05248352360967481, 0.3536275480984162, 0.352809999927606 },
            { 0.1781478492734307, -0.07687880819770677, -0.1245013629928625, 0.1008781000589046, 0.6797042714959993, 0.2426499503622346 },
            { -0.02244754148289256, -0.0607109624193334, -0.04270669737831205, 0.1280850147462928, 0.8630211273492205, 0.1347590591850247 },
            { -0.1184898029318446, -0.04141776930521639, 0.1908142308987769, 0.1180067938088454, 0.7951153101672611, 0.05597123736217727 },
            { -0.10768242458169, -0.02220814339804257, 0.5242513387049099, 0.0763795945376375, 0.5146363445787578, 0.0146232901584273 },
            { -0.04419116736576674, -0.007165322070527795, 0.8375432698255754, 0.02744788112246194, 0.1849404581525429, 0.001424880335714323 },
            { 0.2571500748943296, -0.1217357921352177, -0.02146874080939055, 0.02611199289234355, 0.06178426160386248, 0.7981582035540725 },
            { 0.1522325702199639, -0.1246615387808259, -0.08837648269314125, 0.1206464311673418, 0.285464640540749, 0.6546943795459121 },
            { 0.01661087229659385, -0.1229669828451063, -0.1245013629928625, 0.2318934004043382, 0.5486889711505657, 0.450275101986471 },
            { -0.08876210691847655, -0.1097039420883818, -0.04270669737831205, 0.2944352599128458, 0.6966708821826675, 0.250066604289657 },
            { -0.1249909080808916, -0.0828088505199826, 0.1908142308987769, 0.2712679627309381, 0.6418541412451684, 0.1038634237259905 },
            { -0.09459187788600246, -0.04781121206975434, 0.5242513387049099, 0.1755774929196237, 0.4154384461967716, 0.02713581213445154 },
            { -0.03642009992949465, -0.01615559847555263, 0.8375432698255754, 0.06309578078557344, 0.1492925584894315, 0.002644089304467039 },
            { -0.01098703181202573, -0.01098703181202572, -0.02146874080939053, 0.04394812724810312, 0.04394812724810298, 0.9555465499372358 },
            { -0.05076388396351129, -0.05076388396351134, -0.08837648269314125, 0.2030555358540455, 0.2030555358540454, 0.7837931789120729 },
            { -0.09757279644436297, -0.09757279644436299, -0.1245013629928625, 0.3902911857774519, 0.3902911857774519, 0.5390645843266845 },
            { -0.1238882677619391, -0.1238882677619392, -0.04270669737831205, 0.4955530710477567, 0.4955530710477565, 0.2993770908066771 },
            { -0.1141402629970133, -0.1141402629970134, 0.1908142308987769, 0.4565610519880533, 0.4565610519880532, 0.124344191119143 },
            { -0.07387699238954938, -0.07387699238954945, 0.5242513387049098, 0.2955079695581977, 0.2955079695581976, 0.03248670695779358 },
            { -0.02654854240937558, -0.02654854240937561, 0.8375432698255754, 0.1061941696375025, 0.1061941696375023, 0.003165475718171012 },
            { -0.1217357921352177, 0.2571500748943296, -0.02146874080939055, 0.06178426160386268, 0.02611199289234344, 0.7981582035540725 },
            { -0.1246615387808259, 0.1522325702199636, -0.08837648269314125, 0.285464640540749, 0.1206464311673419, 0.6546943795459126 },
            { -0.1229669828451062, 0.01661087229659389, -0.1245013629928625, 0.5486889711505658, 0.231893400404338, 0.4502751019864709 },
            { -0.1097039420883817, -0.08876210691847662, -0.04270669737831205, 0.6966708821826676, 0.2944352599128457, 0.250066604289657 },
            { -0.08280885051998249, -0.1249909080808916, 0.1908142308987769, 0.6418541412451685, 0.271267962730938, 0.1038634237259905 },
            { -0.04781121206975424, -0.09459187788600253, 0.5242513387049099, 0.4154384461967717, 0.1755774929196236, 0.02713581213445154 },
            { -0.01615559847555257, -0.0364200999294947, 0.8375432698255754, 0.1492925584894317, 0.06309578078557325, 0.002644089304467039 },
            { -0.09441111444870155, 0.5978619981700886, -0.02146874080939055, 0.0765370341512621, 0.01135922034494392, 0.4301216025917975 },
            { -0.08823283402187897, 0.4176882450793233, -0.08837648269314125, 0.3536275480984163, 0.0524835236096747, 0.352809999927606 },
            { -0.07687880819770654, 0.1781478492734308, -0.1245013629928625, 0.6797042714959994, 0.1008781000589044, 0.2426499503622344 },
            { -0.06071096241933321, -0.02244754148289255, -0.04270669737831205, 0.8630211273492208, 0.1280850147462926, 0.1347590591850246 },
            { -0.04141776930521627, -0.1184898029318446, 0.1908142308987769, 0.7951153101672612, 0.1180067938088453, 0.05597123736217727 },
            { -0.02220814339804247, -0.10768242458169, 0.5242513387049099, 0.514636344578758, 0.07637959453763735, 0.0146232901584273 },
            { -0.007165322070527736, -0.04419116736576677, 0.8375432698255754, 0.1849404581525431, 0.02744788112246175, 0.001424880335714323 },
            { -0.02363659740277012, 0.8624244361025747, -0.02146874080939055, 0.08565964255192417, 0.002236611944281803, 0.09478464761337987 },
            { -0.02151290165169072, 0.6260305982320042, -0.08837648269314125, 0.3957771515781189, 0.01033392012997211, 0.07774771440473678 },
            { -0.01798465447603422, 0.3084315815026735, -0.1245013629928625, 0.760719638316469, 0.01986273323843477, 0.05347206441131927 },
            { -0.01353520113751291, 0.03543929416267112, -0.04270669737831205, 0.9658864117649356, 0.02521973033057774, 0.02969646225764062 },
            { -0.008811877994089076, -0.107458675803748, 0.1908142308987769, 0.8898867588974482, 0.02323534507865835, 0.01233421892295351 },
            { -0.004544342181633541, -0.1139454275960457, 0.5242513387049099, 0.5759769216262263, 0.01503901749016905, 0.00322249195637405 },
            { -0.001427560283019225, -0.0488180455563859, 0.8375432698255754, 0.2069838962851254, 0.005404442989879504, 0.000313996738824917 } } };
    alignas(32) static const double FE29_C2_D01_Q49[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE29_C2_Q49[1][49][3] =
        { { { 0.9526465811852268, 0.02487403237606073, 0.0224793864387125 },
            { 0.8627930312234321, 0.02252791561566352, 0.1146790531609042 },
            { 0.7155274328665678, 0.01868274434884274, 0.2657898227845895 },
            { 0.5332307311739594, 0.01392289515659603, 0.4528463736694446 },
            { 0.343651813106453, 0.008972904006716695, 0.6473752828868302 },
            { 0.1756542791952546, 0.004586412541637936, 0.8197593082631076 },
            { 0.05483090095558923, 0.00143165958133301, 0.9437374394630776 },
            { 0.8511913165416183, 0.1263292970196692, 0.0224793864387125 },
            { 0.7709070190923345, 0.1144139277467613, 0.1146790531609042 },
            { 0.6393249602025477, 0.09488521701286287, 0.2657898227845895 },
            { 0.4764425517842301, 0.07071107454632534, 0.4528463736694446 },
            { 0.3070534708328747, 0.04557124628029494, 0.6473752828868302 },
            { 0.1569473927869027, 0.02329329894998982, 0.8197593082631076 },
            { 0.04899150187836195, 0.007271058658560332, 0.9437374394630778 },
            { 0.6871213074732972, 0.2903993060879904, 0.0224793864387125 },
            { 0.6223120802632945, 0.2630088665758011, 0.1146790531609042 },
            { 0.5160929088651123, 0.2181172683502983, 0.2657898227845895 },
            { 0.3846066363176858, 0.1625469900128697, 0.4528463736694446 },
            { 0.2478678744046879, 0.1047568427084817, 0.6473752828868302 },
            { 0.1266952512796092, 0.05354544045728332, 0.8197593082631076 },
            { 0.03954822396745468, 0.0167143365694676, 0.9437374394630778 },
            { 0.4887603067806437, 0.4887603067806437, 0.02247938643871252 },
            { 0.442660473419548, 0.4426604734195478, 0.1146790531609042 },
            { 0.3671050886077052, 0.3671050886077054, 0.2657898227845895 },
            { 0.2735768131652777, 0.2735768131652778, 0.4528463736694446 },
            { 0.1763123585565848, 0.1763123585565848, 0.6473752828868302 },
            { 0.09012034586844622, 0.09012034586844622, 0.8197593082631074 },
            { 0.02813128026846114, 0.02813128026846114, 0.9437374394630778 },
            { 0.2903993060879904, 0.6871213074732971, 0.0224793864387125 },
            { 0.2630088665758013, 0.6223120802632945, 0.1146790531609042 },
            { 0.2181172683502983, 0.5160929088651123, 0.2657898227845895 },
            { 0.1625469900128697, 0.3846066363176858, 0.4528463736694446 },
            { 0.1047568427084817, 0.2478678744046879, 0.6473752828868302 },
            { 0.05354544045728332, 0.1266952512796092, 0.8197593082631076 },
            { 0.0167143365694676, 0.03954822396745468, 0.9437374394630778 },
            { 0.1263292970196692, 0.8511913165416183, 0.0224793864387125 },
            { 0.1144139277467613, 0.7709070190923345, 0.1146790531609042 },
            { 0.09488521701286277, 0.6393249602025478, 0.2657898227845895 },
            { 0.07071107454632526, 0.4764425517842301, 0.4528463736694446 },
            { 0.04557124628029494, 0.3070534708328747, 0.6473752828868302 },
            { 0.02329329894998982, 0.1569473927869027, 0.8197593082631076 },
            { 0.007271058658560332, 0.04899150187836195, 0.9437374394630778 },
            { 0.02487403237606078, 0.9526465811852267, 0.0224793864387125 },
            { 0.02252791561566372, 0.8627930312234321, 0.1146790531609042 },
            { 0.01868274434884274, 0.7155274328665678, 0.2657898227845895 },
            { 0.01392289515659617, 0.5332307311739592, 0.4528463736694446 },
            { 0.008972904006716751, 0.343651813106453, 0.6473752828868302 },
            { 0.004586412541637936, 0.1756542791952546, 0.8197593082631076 },
            { 0.001431659581333028, 0.05483090095558925, 0.9437374394630778 } } };
    // Unstructured piecewise computations
    const double w2_d1_c3 = w[2][15] * FE29_C2_D01_Q49[0][0][0] + w[2][17] * FE29_C2_D01_Q49[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE29_C2_D01_Q49[0][0][0] + coordinate_dofs[2] * FE29_C2_D01_Q49[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE29_C2_D01_Q49[0][0][0] + coordinate_dofs[5] * FE29_C2_D01_Q49[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE29_C2_D01_Q49[0][0][0] + coordinate_dofs[4] * FE29_C2_D01_Q49[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE29_C2_D01_Q49[0][0][0] + coordinate_dofs[3] * FE29_C2_D01_Q49[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE29_C2_D01_Q49[0][0][ic];
    const double w2_d1_c2 = w[2][12] * FE29_C2_D01_Q49[0][0][0] + w[2][14] * FE29_C2_D01_Q49[0][0][1];
    double w2_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c2 += w[2][ic + 12] * FE29_C2_D01_Q49[0][0][ic];
    alignas(32) double sp[41];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = w2_d1_c3 * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = w2_d0_c3 * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = w2_d1_c2 * sp[3];
    sp[9] = w2_d0_c2 * sp[5];
    sp[10] = sp[8] + sp[9];
    sp[11] = sp[7] + -1 * sp[10];
    sp[12] = sp[11] / w[17][0];
    sp[13] = J_c3 / sp[2];
    sp[14] = w2_d0_c3 * sp[13];
    sp[15] = -1 * J_c2 / sp[2];
    sp[16] = w2_d1_c3 * sp[15];
    sp[17] = sp[14] + sp[16];
    sp[18] = w2_d0_c2 * sp[13];
    sp[19] = w2_d1_c2 * sp[15];
    sp[20] = sp[18] + sp[19];
    sp[21] = sp[17] + -1 * sp[20];
    sp[22] = sp[21] / w[17][0];
    sp[23] = -1 * sp[7] * w[9][0];
    sp[24] = sp[23] * sp[3];
    sp[25] = sp[23] * sp[5];
    sp[26] = -1 * sp[17] * w[9][0];
    sp[27] = sp[26] * sp[15];
    sp[28] = sp[26] * sp[13];
    sp[29] = sp[24] + sp[27];
    sp[30] = sp[28] + sp[25];
    sp[31] = -1 * sp[10] * w[6][0];
    sp[32] = sp[31] * sp[5];
    sp[33] = sp[31] * sp[3];
    sp[34] = -1 * sp[20] * w[6][0];
    sp[35] = sp[34] * sp[13];
    sp[36] = sp[34] * sp[15];
    sp[37] = sp[35] + sp[32];
    sp[38] = sp[33] + sp[36];
    sp[39] = -1 * (2 * w[4][0] / 3) + w[3][0];
    sp[40] = std::abs(sp[2]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[5] = {};
    alignas(32) double BF2[5] = {};
    alignas(32) double BF3[6] = {};
    alignas(32) double BF4[5] = {};
    alignas(32) double BF5[5] = {};
    alignas(32) double BF6[2] = {};
    alignas(32) double BF7[2] = {};
    alignas(32) double BF8[2] = {};
    alignas(32) double BF9[3] = {};
    alignas(32) double BF10[2] = {};
    for (int iq = 0; iq < 49; ++iq)
    {
        // Quadrature loop body setup (num_points=49)
        // Unstructured varying computations for num_points=49
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE29_C2_Q49[0][iq][ic];
        double w2_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c2 += w[2][ic + 12] * FE29_C2_Q49[0][iq][ic];
        double w11 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w11 += w[11][ic] * FE29_C2_Q49[0][iq][ic];
        double w14_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w14_c0 += w[14][ic] * FE27_C0_Q49[0][iq][ic];
        double w14_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w14_c1 += w[14][ic + 6] * FE27_C0_Q49[0][iq][ic];
        double w1 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1 += w[1][ic] * FE29_C2_Q49[0][iq][ic];
        const double w2_d1_c1 = w[2][6] * FE27_C0_D01_Q49[0][iq][0] + w[2][8] * FE27_C0_D01_Q49[0][iq][1] + w[2][9] * FE27_C0_D01_Q49[0][iq][2] + w[2][10] * FE27_C0_D01_Q49[0][iq][3] + w[2][11] * FE27_C0_D01_Q49[0][iq][4];
        const double w2_d0_c1 = w[2][6] * FE27_C0_D10_Q49[0][iq][0] + w[2][7] * FE27_C0_D10_Q49[0][iq][1] + w[2][9] * FE27_C0_D10_Q49[0][iq][2] + w[2][10] * FE27_C0_D10_Q49[0][iq][3] + w[2][11] * FE27_C0_D10_Q49[0][iq][4];
        const double w2_d0_c0 = w[2][0] * FE27_C0_D10_Q49[0][iq][0] + w[2][1] * FE27_C0_D10_Q49[0][iq][1] + w[2][3] * FE27_C0_D10_Q49[0][iq][2] + w[2][4] * FE27_C0_D10_Q49[0][iq][3] + w[2][5] * FE27_C0_D10_Q49[0][iq][4];
        const double w2_d1_c0 = w[2][0] * FE27_C0_D01_Q49[0][iq][0] + w[2][2] * FE27_C0_D01_Q49[0][iq][1] + w[2][3] * FE27_C0_D01_Q49[0][iq][2] + w[2][4] * FE27_C0_D01_Q49[0][iq][3] + w[2][5] * FE27_C0_D01_Q49[0][iq][4];
        double w0_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w0_c3 += w[0][ic + 15] * FE29_C2_Q49[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w0_c2 += w[0][ic + 12] * FE29_C2_Q49[0][iq][ic];
        alignas(32) double sv49[302];
        sv49[0] = w2_c3 * w[15][0];
        sv49[1] = w2_c3 + -1 * w2_c2;
        sv49[2] = sv49[1] + -1 * w11;
        sv49[3] = std::abs(sv49[2]);
        sv49[4] = sv49[2] + sv49[3];
        sv49[5] = sv49[4] / 2 / w[12][0];
        sv49[6] = std::pow(sv49[5], 1 / (1 + -1 * w[13][0]));
        sv49[7] = std::pow(1 + sv49[6], -1 * w[13][0]);
        sv49[8] = std::pow(1 + -1 * sv49[7], 3) / w[10][0];
        sv49[9] = sv49[0] * sv49[8];
        sv49[10] = sv49[9] * w[9][0];
        sv49[11] = -1 * sp[7] * sv49[10];
        sv49[12] = sv49[11] * sp[12];
        sv49[13] = -1 * sp[17] * sv49[10];
        sv49[14] = sv49[13] * sp[22];
        sv49[15] = sv49[12] + sv49[14];
        sv49[16] = sv49[1] / w[17][0];
        sv49[17] = std::tanh(sv49[16]);
        sv49[18] = sv49[15] * ((1 + -1 * std::pow(sv49[17], 2)) / 2);
        sv49[19] = w2_c3 * (-1 * w[15][0]);
        sv49[20] = sv49[19] * sv49[8];
        sv49[21] = sp[29] * sv49[20];
        sv49[22] = sp[30] * sv49[20];
        sv49[23] = sv49[21] * ((1 + sv49[17]) / 2);
        sv49[24] = sv49[22] * ((1 + sv49[17]) / 2);
        sv49[25] = w2_c2 + -1 * w[16][0];
        sv49[26] = w2_c3 + -1 * sv49[25];
        sv49[27] = -1 * sv49[1] / w[17][0];
        sv49[28] = std::tanh(sv49[27]);
        sv49[29] = (1 + sv49[28]) / 2 * w[18][0];
        sv49[30] = sv49[26] * sv49[29];
        sv49[31] = -1 * sv49[18] + sv49[30];
        sv49[32] = w14_c0 * w[8][0];
        sv49[33] = sv49[32] * w[6][0];
        sv49[34] = sv49[33] * sp[13];
        sv49[35] = sv49[33] * sp[15];
        sv49[36] = w14_c1 * w[8][0];
        sv49[37] = sv49[36] * w[6][0];
        sv49[38] = sv49[37] * sp[5];
        sv49[39] = sv49[37] * sp[3];
        sv49[40] = sv49[34] + sv49[38];
        sv49[41] = sv49[39] + sv49[35];
        sv49[42] = std::pow(sv49[7], 3) / w[7][0];
        sv49[43] = sv49[40] * sv49[42];
        sv49[44] = sv49[41] * sv49[42];
        sv49[45] = -1 * std::pow(sv49[7], 3) / w[7][0];
        sv49[46] = sp[37] * sv49[45];
        sv49[47] = sp[38] * sv49[45];
        sv49[48] = -1 * sv49[43] + sv49[46];
        sv49[49] = -1 * sv49[44] + sv49[47];
        sv49[50] = sv49[7] * w[8][0];
        sv49[51] = -1 * w[5][0] + sv49[50];
        sv49[52] = sv49[51] * w1;
        sv49[53] = sv49[52] + w[5][0];
        sv49[54] = w14_c0 * sv49[53];
        sv49[55] = w14_c1 * sv49[53];
        sv49[56] = w2_d1_c1 * sp[3];
        sv49[57] = w2_d0_c1 * sp[5];
        sv49[58] = sv49[56] + sv49[57];
        sv49[59] = sv49[58] + sv49[58];
        sv49[60] = w2_d0_c0 * sp[13];
        sv49[61] = w2_d1_c0 * sp[15];
        sv49[62] = sv49[60] + sv49[61];
        sv49[63] = sv49[62] + sv49[62];
        sv49[64] = sv49[59] / 2 + sv49[63] / 2;
        sv49[65] = sv49[64] * sp[39];
        sv49[66] = 2 * w[4][0] * (sv49[63] / 2);
        sv49[67] = sv49[65] + sv49[66];
        sv49[68] = 0.2 * sv49[1] + -1 * (0.1 * sv49[1]);
        sv49[69] = 0.1 * sv49[1] + -1 * w11;
        sv49[70] = std::abs(sv49[69]);
        sv49[71] = sv49[69] + sv49[70];
        sv49[72] = sv49[71] / 2 / w[12][0];
        sv49[73] = std::pow(sv49[72], 1 / (1 + -1 * w[13][0]));
        sv49[74] = std::pow(1 + sv49[73], -1 * w[13][0]);
        sv49[75] = 0.2 * sv49[1] + -1 * w11;
        sv49[76] = std::abs(sv49[75]);
        sv49[77] = sv49[75] + sv49[76];
        sv49[78] = sv49[77] / 2 / w[12][0];
        sv49[79] = std::pow(sv49[78], 1 / (1 + -1 * w[13][0]));
        sv49[80] = std::pow(1 + sv49[79], -1 * w[13][0]);
        sv49[81] = sv49[74] + sv49[80];
        sv49[82] = sv49[68] * (0.5 * sv49[81]);
        sv49[83] = std::abs(-1 * w11);
        sv49[84] = -1 * w11 + sv49[83];
        sv49[85] = sv49[84] / 2 / w[12][0];
        sv49[86] = std::pow(sv49[85], 1 / (1 + -1 * w[13][0]));
        sv49[87] = std::pow(1 + sv49[86], -1 * w[13][0]);
        sv49[88] = sv49[74] + sv49[87];
        sv49[89] = 0.1 * sv49[1] * (0.5 * sv49[88]);
        sv49[90] = sv49[82] + sv49[89];
        sv49[91] = 0.3 * sv49[1] + -1 * (0.2 * sv49[1]);
        sv49[92] = 0.3 * sv49[1] + -1 * w11;
        sv49[93] = std::abs(sv49[92]);
        sv49[94] = sv49[92] + sv49[93];
        sv49[95] = sv49[94] / 2 / w[12][0];
        sv49[96] = std::pow(sv49[95], 1 / (1 + -1 * w[13][0]));
        sv49[97] = std::pow(1 + sv49[96], -1 * w[13][0]);
        sv49[98] = sv49[80] + sv49[97];
        sv49[99] = sv49[91] * (0.5 * sv49[98]);
        sv49[100] = sv49[90] + sv49[99];
        sv49[101] = 0.4 * sv49[1] + -1 * (0.3 * sv49[1]);
        sv49[102] = 0.4 * sv49[1] + -1 * w11;
        sv49[103] = std::abs(sv49[102]);
        sv49[104] = sv49[102] + sv49[103];
        sv49[105] = sv49[104] / 2 / w[12][0];
        sv49[106] = std::pow(sv49[105], 1 / (1 + -1 * w[13][0]));
        sv49[107] = std::pow(1 + sv49[106], -1 * w[13][0]);
        sv49[108] = sv49[97] + sv49[107];
        sv49[109] = sv49[101] * (0.5 * sv49[108]);
        sv49[110] = sv49[100] + sv49[109];
        sv49[111] = 0.5 * sv49[1] + -1 * (0.4 * sv49[1]);
        sv49[112] = 0.5 * sv49[1] + -1 * w11;
        sv49[113] = std::abs(sv49[112]);
        sv49[114] = sv49[112] + sv49[113];
        sv49[115] = sv49[114] / 2 / w[12][0];
        sv49[116] = std::pow(sv49[115], 1 / (1 + -1 * w[13][0]));
        sv49[117] = std::pow(1 + sv49[116], -1 * w[13][0]);
        sv49[118] = sv49[107] + sv49[117];
        sv49[119] = sv49[111] * (0.5 * sv49[118]);
        sv49[120] = sv49[110] + sv49[119];
        sv49[121] = 0.6 * sv49[1] + -1 * (0.5 * sv49[1]);
        sv49[122] = 0.6 * sv49[1] + -1 * w11;
        sv49[123] = std::abs(sv49[122]);
        sv49[124] = sv49[122] + sv49[123];
        sv49[125] = sv49[124] / 2 / w[12][0];
        sv49[126] = std::pow(sv49[125], 1 / (1 + -1 * w[13][0]));
        sv49[127] = std::pow(1 + sv49[126], -1 * w[13][0]);
        sv49[128] = sv49[117] + sv49[127];
        sv49[129] = sv49[121] * (0.5 * sv49[128]);
        sv49[130] = sv49[120] + sv49[129];
        sv49[131] = 0.7 * sv49[1] + -1 * (0.6 * sv49[1]);
        sv49[132] = 0.7 * sv49[1] + -1 * w11;
        sv49[133] = std::abs(sv49[132]);
        sv49[134] = sv49[132] + sv49[133];
        sv49[135] = sv49[134] / 2 / w[12][0];
        sv49[136] = std::pow(sv49[135], 1 / (1 + -1 * w[13][0]));
        sv49[137] = std::pow(1 + sv49[136], -1 * w[13][0]);
        sv49[138] = sv49[127] + sv49[137];
        sv49[139] = sv49[131] * (0.5 * sv49[138]);
        sv49[140] = sv49[130] + sv49[139];
        sv49[141] = 0.8 * sv49[1] + -1 * (0.7 * sv49[1]);
        sv49[142] = 0.8 * sv49[1] + -1 * w11;
        sv49[143] = std::abs(sv49[142]);
        sv49[144] = sv49[142] + sv49[143];
        sv49[145] = sv49[144] / 2 / w[12][0];
        sv49[146] = std::pow(sv49[145], 1 / (1 + -1 * w[13][0]));
        sv49[147] = std::pow(1 + sv49[146], -1 * w[13][0]);
        sv49[148] = sv49[137] + sv49[147];
        sv49[149] = sv49[141] * (0.5 * sv49[148]);
        sv49[150] = sv49[140] + sv49[149];
        sv49[151] = 0.9 * sv49[1] + -1 * (0.8 * sv49[1]);
        sv49[152] = 0.9 * sv49[1] + -1 * w11;
        sv49[153] = std::abs(sv49[152]);
        sv49[154] = sv49[152] + sv49[153];
        sv49[155] = sv49[154] / 2 / w[12][0];
        sv49[156] = std::pow(sv49[155], 1 / (1 + -1 * w[13][0]));
        sv49[157] = std::pow(1 + sv49[156], -1 * w[13][0]);
        sv49[158] = sv49[147] + sv49[157];
        sv49[159] = sv49[151] * (0.5 * sv49[158]);
        sv49[160] = sv49[150] + sv49[159];
        sv49[161] = sv49[1] + -1 * (0.9 * sv49[1]);
        sv49[162] = sv49[7] + sv49[157];
        sv49[163] = sv49[161] * (0.5 * sv49[162]);
        sv49[164] = sv49[160] + sv49[163];
        sv49[165] = w2_c3 + -1 * sv49[164];
        sv49[166] = w0_c3 + -1 * w0_c2;
        sv49[167] = 0.2 * sv49[166] + -1 * (0.1 * sv49[166]);
        sv49[168] = 0.1 * sv49[166] + -1 * w11;
        sv49[169] = std::abs(sv49[168]);
        sv49[170] = sv49[168] + sv49[169];
        sv49[171] = sv49[170] / 2 / w[12][0];
        sv49[172] = std::pow(sv49[171], 1 / (1 + -1 * w[13][0]));
        sv49[173] = std::pow(1 + sv49[172], -1 * w[13][0]);
        sv49[174] = 0.2 * sv49[166] + -1 * w11;
        sv49[175] = std::abs(sv49[174]);
        sv49[176] = sv49[174] + sv49[175];
        sv49[177] = sv49[176] / 2 / w[12][0];
        sv49[178] = std::pow(sv49[177], 1 / (1 + -1 * w[13][0]));
        sv49[179] = std::pow(1 + sv49[178], -1 * w[13][0]);
        sv49[180] = sv49[173] + sv49[179];
        sv49[181] = sv49[167] * (0.5 * sv49[180]);
        sv49[182] = sv49[173] + sv49[87];
        sv49[183] = 0.1 * sv49[166] * (0.5 * sv49[182]);
        sv49[184] = sv49[181] + sv49[183];
        sv49[185] = 0.3 * sv49[166] + -1 * (0.2 * sv49[166]);
        sv49[186] = 0.3 * sv49[166] + -1 * w11;
        sv49[187] = std::abs(sv49[186]);
        sv49[188] = sv49[186] + sv49[187];
        sv49[189] = sv49[188] / 2 / w[12][0];
        sv49[190] = std::pow(sv49[189], 1 / (1 + -1 * w[13][0]));
        sv49[191] = std::pow(1 + sv49[190], -1 * w[13][0]);
        sv49[192] = sv49[179] + sv49[191];
        sv49[193] = sv49[185] * (0.5 * sv49[192]);
        sv49[194] = sv49[184] + sv49[193];
        sv49[195] = 0.4 * sv49[166] + -1 * (0.3 * sv49[166]);
        sv49[196] = 0.4 * sv49[166] + -1 * w11;
        sv49[197] = std::abs(sv49[196]);
        sv49[198] = sv49[196] + sv49[197];
        sv49[199] = sv49[198] / 2 / w[12][0];
        sv49[200] = std::pow(sv49[199], 1 / (1 + -1 * w[13][0]));
        sv49[201] = std::pow(1 + sv49[200], -1 * w[13][0]);
        sv49[202] = sv49[191] + sv49[201];
        sv49[203] = sv49[195] * (0.5 * sv49[202]);
        sv49[204] = sv49[194] + sv49[203];
        sv49[205] = 0.5 * sv49[166] + -1 * (0.4 * sv49[166]);
        sv49[206] = 0.5 * sv49[166] + -1 * w11;
        sv49[207] = std::abs(sv49[206]);
        sv49[208] = sv49[206] + sv49[207];
        sv49[209] = sv49[208] / 2 / w[12][0];
        sv49[210] = std::pow(sv49[209], 1 / (1 + -1 * w[13][0]));
        sv49[211] = std::pow(1 + sv49[210], -1 * w[13][0]);
        sv49[212] = sv49[201] + sv49[211];
        sv49[213] = sv49[205] * (0.5 * sv49[212]);
        sv49[214] = sv49[204] + sv49[213];
        sv49[215] = 0.6 * sv49[166] + -1 * (0.5 * sv49[166]);
        sv49[216] = 0.6 * sv49[166] + -1 * w11;
        sv49[217] = std::abs(sv49[216]);
        sv49[218] = sv49[216] + sv49[217];
        sv49[219] = sv49[218] / 2 / w[12][0];
        sv49[220] = std::pow(sv49[219], 1 / (1 + -1 * w[13][0]));
        sv49[221] = std::pow(1 + sv49[220], -1 * w[13][0]);
        sv49[222] = sv49[211] + sv49[221];
        sv49[223] = sv49[215] * (0.5 * sv49[222]);
        sv49[224] = sv49[214] + sv49[223];
        sv49[225] = 0.7 * sv49[166] + -1 * (0.6 * sv49[166]);
        sv49[226] = 0.7 * sv49[166] + -1 * w11;
        sv49[227] = std::abs(sv49[226]);
        sv49[228] = sv49[226] + sv49[227];
        sv49[229] = sv49[228] / 2 / w[12][0];
        sv49[230] = std::pow(sv49[229], 1 / (1 + -1 * w[13][0]));
        sv49[231] = std::pow(1 + sv49[230], -1 * w[13][0]);
        sv49[232] = sv49[221] + sv49[231];
        sv49[233] = sv49[225] * (0.5 * sv49[232]);
        sv49[234] = sv49[224] + sv49[233];
        sv49[235] = 0.8 * sv49[166] + -1 * (0.7 * sv49[166]);
        sv49[236] = 0.8 * sv49[166] + -1 * w11;
        sv49[237] = std::abs(sv49[236]);
        sv49[238] = sv49[236] + sv49[237];
        sv49[239] = sv49[238] / 2 / w[12][0];
        sv49[240] = std::pow(sv49[239], 1 / (1 + -1 * w[13][0]));
        sv49[241] = std::pow(1 + sv49[240], -1 * w[13][0]);
        sv49[242] = sv49[231] + sv49[241];
        sv49[243] = sv49[235] * (0.5 * sv49[242]);
        sv49[244] = sv49[234] + sv49[243];
        sv49[245] = 0.9 * sv49[166] + -1 * (0.8 * sv49[166]);
        sv49[246] = 0.9 * sv49[166] + -1 * w11;
        sv49[247] = std::abs(sv49[246]);
        sv49[248] = sv49[246] + sv49[247];
        sv49[249] = sv49[248] / 2 / w[12][0];
        sv49[250] = std::pow(sv49[249], 1 / (1 + -1 * w[13][0]));
        sv49[251] = std::pow(1 + sv49[250], -1 * w[13][0]);
        sv49[252] = sv49[241] + sv49[251];
        sv49[253] = sv49[245] * (0.5 * sv49[252]);
        sv49[254] = sv49[244] + sv49[253];
        sv49[255] = sv49[166] + -1 * (0.9 * sv49[166]);
        sv49[256] = sv49[166] + -1 * w11;
        sv49[257] = std::abs(sv49[256]);
        sv49[258] = sv49[256] + sv49[257];
        sv49[259] = sv49[258] / 2 / w[12][0];
        sv49[260] = std::pow(sv49[259], 1 / (1 + -1 * w[13][0]));
        sv49[261] = std::pow(1 + sv49[260], -1 * w[13][0]);
        sv49[262] = sv49[261] + sv49[251];
        sv49[263] = sv49[255] * (0.5 * sv49[262]);
        sv49[264] = sv49[254] + sv49[263];
        sv49[265] = w0_c3 + -1 * sv49[264];
        sv49[266] = sv49[165] + -1 * sv49[265];
        sv49[267] = sv49[67] + -1 * sv49[266];
        sv49[268] = sv49[267] * sp[13];
        sv49[269] = sv49[267] * sp[15];
        sv49[270] = w2_d1_c0 * sp[3];
        sv49[271] = w2_d0_c0 * sp[5];
        sv49[272] = sv49[270] + sv49[271];
        sv49[273] = w2_d0_c1 * sp[13];
        sv49[274] = w2_d1_c1 * sp[15];
        sv49[275] = sv49[273] + sv49[274];
        sv49[276] = sv49[272] + sv49[275];
        sv49[277] = 2 * w[4][0] * (sv49[276] / 2);
        sv49[278] = sv49[277] * sp[5];
        sv49[279] = sv49[277] * sp[3];
        sv49[280] = sv49[268] + sv49[278];
        sv49[281] = sv49[279] + sv49[269];
        sv49[282] = 2 * w[4][0] * (sv49[59] / 2);
        sv49[283] = sv49[65] + sv49[282];
        sv49[284] = sv49[283] + -1 * sv49[266];
        sv49[285] = sv49[284] * sp[3];
        sv49[286] = sv49[284] * sp[5];
        sv49[287] = sv49[277] * sp[15];
        sv49[288] = sv49[277] * sp[13];
        sv49[289] = sv49[285] + sv49[287];
        sv49[290] = sv49[288] + sv49[286];
        sv49[291] = -1 * sv49[31] * sp[40];
        sv49[292] = -1 * sv49[23] * sp[40];
        sv49[293] = -1 * sv49[24] * sp[40];
        sv49[294] = sv49[48] * sp[40];
        sv49[295] = sv49[49] * sp[40];
        sv49[296] = sv49[54] * sp[40];
        sv49[297] = sv49[55] * sp[40];
        sv49[298] = -1 * sv49[280] * sp[40];
        sv49[299] = -1 * sv49[281] * sp[40];
        sv49[300] = -1 * sv49[289] * sp[40];
        sv49[301] = -1 * sv49[290] * sp[40];
        const double fw0 = sv49[296] * weights49[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE27_C0_Q49[0][iq][i];
        const double fw1 = sv49[298] * weights49[iq];
        for (int i = 0; i < 5; ++i)
            BF1[i] += fw1 * FE27_C0_D10_Q49[0][iq][i];
        const double fw2 = sv49[299] * weights49[iq];
        for (int i = 0; i < 5; ++i)
            BF2[i] += fw2 * FE27_C0_D01_Q49[0][iq][i];
        const double fw3 = sv49[297] * weights49[iq];
        for (int i = 0; i < 6; ++i)
            BF3[i] += fw3 * FE27_C0_Q49[0][iq][i];
        const double fw4 = sv49[301] * weights49[iq];
        for (int i = 0; i < 5; ++i)
            BF4[i] += fw4 * FE27_C0_D10_Q49[0][iq][i];
        const double fw5 = sv49[300] * weights49[iq];
        for (int i = 0; i < 5; ++i)
            BF5[i] += fw5 * FE27_C0_D01_Q49[0][iq][i];
        const double fw6 = sv49[294] * weights49[iq];
        for (int i = 0; i < 2; ++i)
            BF6[i] += fw6 * FE29_C2_D01_Q49[0][0][i];
        const double fw7 = sv49[295] * weights49[iq];
        for (int i = 0; i < 2; ++i)
            BF7[i] += fw7 * FE29_C2_D01_Q49[0][0][i];
        const double fw8 = sv49[293] * weights49[iq];
        for (int i = 0; i < 2; ++i)
            BF8[i] += fw8 * FE29_C2_D01_Q49[0][0][i];
        const double fw9 = sv49[291] * weights49[iq];
        for (int i = 0; i < 3; ++i)
            BF9[i] += fw9 * FE29_C2_Q49[0][iq][i];
        const double fw10 = sv49[292] * weights49[iq];
        for (int i = 0; i < 2; ++i)
            BF10[i] += fw10 * FE29_C2_D01_Q49[0][0][i];
    }
    std::fill(A, A + 18, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    static const int DM4[2] = { 12, 14 };
    static const int DM5[2] = { 15, 17 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 5; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF3[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF4[i];
    for (int i = 0; i < 5; ++i)
        A[DM3[i]] += BF5[i];
    for (int i = 0; i < 2; ++i)
        A[i + 12] += BF6[i];
    for (int i = 0; i < 2; ++i)
        A[DM4[i]] += BF7[i];
    for (int i = 0; i < 2; ++i)
        A[i + 15] += BF8[i];
    for (int i = 0; i < 3; ++i)
        A[i + 15] += BF9[i];
    for (int i = 0; i < 2; ++i)
        A[DM5[i]] += BF10[i];
  }

};


class initialnewton2d_form_0: public ufc::form
{
public:

  initialnewton2d_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~initialnewton2d_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "bc5ab8c41cf7b4baafa6d55415eff0e2e2e89fd4d3d0b91eea83c04fad7fc9bd95e87349b0e0b80834a38c05d9eb811fe55cf5f9223cb4b8e5d13a77967e05f1";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 17;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 17)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new initialnewton2d_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new initialnewton2d_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new initialnewton2d_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new initialnewton2d_finite_element_4();
    case 1:
        return new initialnewton2d_finite_element_4();
    case 2:
        return new initialnewton2d_finite_element_0();
    case 3:
        return new initialnewton2d_finite_element_4();
    case 4:
        return new initialnewton2d_finite_element_5();
    case 5:
        return new initialnewton2d_finite_element_5();
    case 6:
        return new initialnewton2d_finite_element_5();
    case 7:
        return new initialnewton2d_finite_element_5();
    case 8:
        return new initialnewton2d_finite_element_5();
    case 9:
        return new initialnewton2d_finite_element_5();
    case 10:
        return new initialnewton2d_finite_element_5();
    case 11:
        return new initialnewton2d_finite_element_0();
    case 12:
        return new initialnewton2d_finite_element_5();
    case 13:
        return new initialnewton2d_finite_element_5();
    case 14:
        return new initialnewton2d_finite_element_3();
    case 15:
        return new initialnewton2d_finite_element_5();
    case 16:
        return new initialnewton2d_finite_element_5();
    case 17:
        return new initialnewton2d_finite_element_5();
    case 18:
        return new initialnewton2d_finite_element_5();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new initialnewton2d_dofmap_4();
    case 1:
        return new initialnewton2d_dofmap_4();
    case 2:
        return new initialnewton2d_dofmap_0();
    case 3:
        return new initialnewton2d_dofmap_4();
    case 4:
        return new initialnewton2d_dofmap_5();
    case 5:
        return new initialnewton2d_dofmap_5();
    case 6:
        return new initialnewton2d_dofmap_5();
    case 7:
        return new initialnewton2d_dofmap_5();
    case 8:
        return new initialnewton2d_dofmap_5();
    case 9:
        return new initialnewton2d_dofmap_5();
    case 10:
        return new initialnewton2d_dofmap_5();
    case 11:
        return new initialnewton2d_dofmap_0();
    case 12:
        return new initialnewton2d_dofmap_5();
    case 13:
        return new initialnewton2d_dofmap_5();
    case 14:
        return new initialnewton2d_dofmap_3();
    case 15:
        return new initialnewton2d_dofmap_5();
    case 16:
        return new initialnewton2d_dofmap_5();
    case 17:
        return new initialnewton2d_dofmap_5();
    case 18:
        return new initialnewton2d_dofmap_5();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new initialnewton2d_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class initialnewton2d_form_1: public ufc::form
{
public:

  initialnewton2d_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~initialnewton2d_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "1c03f24e82a41e78e2fcb944ee6875a53aa788e206451e78d9e6d3baef18217beef973b1b41b1a4f0add7815b29f37aa6f0b944ca1cc36c3da0f48d87bfc205a";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 19;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 19)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new initialnewton2d_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new initialnewton2d_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new initialnewton2d_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new initialnewton2d_finite_element_4();
    case 1:
        return new initialnewton2d_finite_element_4();
    case 2:
        return new initialnewton2d_finite_element_0();
    case 3:
        return new initialnewton2d_finite_element_4();
    case 4:
        return new initialnewton2d_finite_element_5();
    case 5:
        return new initialnewton2d_finite_element_5();
    case 6:
        return new initialnewton2d_finite_element_5();
    case 7:
        return new initialnewton2d_finite_element_5();
    case 8:
        return new initialnewton2d_finite_element_5();
    case 9:
        return new initialnewton2d_finite_element_5();
    case 10:
        return new initialnewton2d_finite_element_5();
    case 11:
        return new initialnewton2d_finite_element_5();
    case 12:
        return new initialnewton2d_finite_element_0();
    case 13:
        return new initialnewton2d_finite_element_5();
    case 14:
        return new initialnewton2d_finite_element_5();
    case 15:
        return new initialnewton2d_finite_element_3();
    case 16:
        return new initialnewton2d_finite_element_5();
    case 17:
        return new initialnewton2d_finite_element_5();
    case 18:
        return new initialnewton2d_finite_element_5();
    case 19:
        return new initialnewton2d_finite_element_5();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new initialnewton2d_dofmap_4();
    case 1:
        return new initialnewton2d_dofmap_4();
    case 2:
        return new initialnewton2d_dofmap_0();
    case 3:
        return new initialnewton2d_dofmap_4();
    case 4:
        return new initialnewton2d_dofmap_5();
    case 5:
        return new initialnewton2d_dofmap_5();
    case 6:
        return new initialnewton2d_dofmap_5();
    case 7:
        return new initialnewton2d_dofmap_5();
    case 8:
        return new initialnewton2d_dofmap_5();
    case 9:
        return new initialnewton2d_dofmap_5();
    case 10:
        return new initialnewton2d_dofmap_5();
    case 11:
        return new initialnewton2d_dofmap_5();
    case 12:
        return new initialnewton2d_dofmap_0();
    case 13:
        return new initialnewton2d_dofmap_5();
    case 14:
        return new initialnewton2d_dofmap_5();
    case 15:
        return new initialnewton2d_dofmap_3();
    case 16:
        return new initialnewton2d_dofmap_5();
    case 17:
        return new initialnewton2d_dofmap_5();
    case 18:
        return new initialnewton2d_dofmap_5();
    case 19:
        return new initialnewton2d_dofmap_5();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new initialnewton2d_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace InitialNewton2D
{

class CoefficientSpace_Etag: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_Etag(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_Etag(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_Etal: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_Etal(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_Etal(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_K: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_K(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_K(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_Kig: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_Kig(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_Kig(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_Kil: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_Kil(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_Kil(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_M: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_M(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_M(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_Mu: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_Mu(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_Mu(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_g: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_g(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_g(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_h: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_h(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_h(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_m: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_m(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_m(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_omega: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_omega(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_omega(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_p_sat: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_p_sat(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_p_sat(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_p_width: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_p_width(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_p_width(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_pe: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_pe(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_pe(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_phi0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_phi0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_phi0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_rhoL: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_rhoL(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_rhoL(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_rhoS: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_rhoS(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_rhoS(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_w0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_w0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_w0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_wk: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_wk(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_wk(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_phi0 Form_a_FunctionSpace_2;

typedef CoefficientSpace_wk Form_a_FunctionSpace_3;

typedef CoefficientSpace_K Form_a_FunctionSpace_4;

typedef CoefficientSpace_Mu Form_a_FunctionSpace_5;

typedef CoefficientSpace_Kil Form_a_FunctionSpace_6;

typedef CoefficientSpace_Etal Form_a_FunctionSpace_7;

typedef CoefficientSpace_rhoL Form_a_FunctionSpace_8;

typedef CoefficientSpace_Kig Form_a_FunctionSpace_9;

typedef CoefficientSpace_Etag Form_a_FunctionSpace_10;

typedef CoefficientSpace_pe Form_a_FunctionSpace_11;

typedef CoefficientSpace_M Form_a_FunctionSpace_12;

typedef CoefficientSpace_m Form_a_FunctionSpace_13;

typedef CoefficientSpace_g Form_a_FunctionSpace_14;

typedef CoefficientSpace_h Form_a_FunctionSpace_15;

typedef CoefficientSpace_p_sat Form_a_FunctionSpace_16;

typedef CoefficientSpace_p_width Form_a_FunctionSpace_17;

typedef CoefficientSpace_omega Form_a_FunctionSpace_18;

class Form_a: public dolfin::Form
{
public:

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 17), phi0(*this, 0), wk(*this, 1), K(*this, 2), Mu(*this, 3), Kil(*this, 4), Etal(*this, 5), rhoL(*this, 6), Kig(*this, 7), Etag(*this, 8), pe(*this, 9), M(*this, 10), m(*this, 11), g(*this, 12), h(*this, 13), p_sat(*this, 14), p_width(*this, 15), omega(*this, 16)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const initialnewton2d_form_0>();
  }

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> phi0, std::shared_ptr<const dolfin::GenericFunction> wk, std::shared_ptr<const dolfin::GenericFunction> K, std::shared_ptr<const dolfin::GenericFunction> Mu, std::shared_ptr<const dolfin::GenericFunction> Kil, std::shared_ptr<const dolfin::GenericFunction> Etal, std::shared_ptr<const dolfin::GenericFunction> rhoL, std::shared_ptr<const dolfin::GenericFunction> Kig, std::shared_ptr<const dolfin::GenericFunction> Etag, std::shared_ptr<const dolfin::GenericFunction> pe, std::shared_ptr<const dolfin::GenericFunction> M, std::shared_ptr<const dolfin::GenericFunction> m, std::shared_ptr<const dolfin::GenericFunction> g, std::shared_ptr<const dolfin::GenericFunction> h, std::shared_ptr<const dolfin::GenericFunction> p_sat, std::shared_ptr<const dolfin::GenericFunction> p_width, std::shared_ptr<const dolfin::GenericFunction> omega):
    dolfin::Form(2, 17), phi0(*this, 0), wk(*this, 1), K(*this, 2), Mu(*this, 3), Kil(*this, 4), Etal(*this, 5), rhoL(*this, 6), Kig(*this, 7), Etag(*this, 8), pe(*this, 9), M(*this, 10), m(*this, 11), g(*this, 12), h(*this, 13), p_sat(*this, 14), p_width(*this, 15), omega(*this, 16)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->phi0 = phi0;
    this->wk = wk;
    this->K = K;
    this->Mu = Mu;
    this->Kil = Kil;
    this->Etal = Etal;
    this->rhoL = rhoL;
    this->Kig = Kig;
    this->Etag = Etag;
    this->pe = pe;
    this->M = M;
    this->m = m;
    this->g = g;
    this->h = h;
    this->p_sat = p_sat;
    this->p_width = p_width;
    this->omega = omega;

    _ufc_form = std::make_shared<const initialnewton2d_form_0>();
  }

  // Destructor
  ~Form_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "phi0")
      return 0;
    else if (name == "wk")
      return 1;
    else if (name == "K")
      return 2;
    else if (name == "Mu")
      return 3;
    else if (name == "Kil")
      return 4;
    else if (name == "Etal")
      return 5;
    else if (name == "rhoL")
      return 6;
    else if (name == "Kig")
      return 7;
    else if (name == "Etag")
      return 8;
    else if (name == "pe")
      return 9;
    else if (name == "M")
      return 10;
    else if (name == "m")
      return 11;
    else if (name == "g")
      return 12;
    else if (name == "h")
      return 13;
    else if (name == "p_sat")
      return 14;
    else if (name == "p_width")
      return 15;
    else if (name == "omega")
      return 16;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "phi0";
    case 1:
      return "wk";
    case 2:
      return "K";
    case 3:
      return "Mu";
    case 4:
      return "Kil";
    case 5:
      return "Etal";
    case 6:
      return "rhoL";
    case 7:
      return "Kig";
    case 8:
      return "Etag";
    case 9:
      return "pe";
    case 10:
      return "M";
    case 11:
      return "m";
    case 12:
      return "g";
    case 13:
      return "h";
    case 14:
      return "p_sat";
    case 15:
      return "p_width";
    case 16:
      return "omega";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_a_FunctionSpace_2 CoefficientSpace_phi0;
  typedef Form_a_FunctionSpace_3 CoefficientSpace_wk;
  typedef Form_a_FunctionSpace_4 CoefficientSpace_K;
  typedef Form_a_FunctionSpace_5 CoefficientSpace_Mu;
  typedef Form_a_FunctionSpace_6 CoefficientSpace_Kil;
  typedef Form_a_FunctionSpace_7 CoefficientSpace_Etal;
  typedef Form_a_FunctionSpace_8 CoefficientSpace_rhoL;
  typedef Form_a_FunctionSpace_9 CoefficientSpace_Kig;
  typedef Form_a_FunctionSpace_10 CoefficientSpace_Etag;
  typedef Form_a_FunctionSpace_11 CoefficientSpace_pe;
  typedef Form_a_FunctionSpace_12 CoefficientSpace_M;
  typedef Form_a_FunctionSpace_13 CoefficientSpace_m;
  typedef Form_a_FunctionSpace_14 CoefficientSpace_g;
  typedef Form_a_FunctionSpace_15 CoefficientSpace_h;
  typedef Form_a_FunctionSpace_16 CoefficientSpace_p_sat;
  typedef Form_a_FunctionSpace_17 CoefficientSpace_p_width;
  typedef Form_a_FunctionSpace_18 CoefficientSpace_omega;

  // Coefficients
  dolfin::CoefficientAssigner phi0;
  dolfin::CoefficientAssigner wk;
  dolfin::CoefficientAssigner K;
  dolfin::CoefficientAssigner Mu;
  dolfin::CoefficientAssigner Kil;
  dolfin::CoefficientAssigner Etal;
  dolfin::CoefficientAssigner rhoL;
  dolfin::CoefficientAssigner Kig;
  dolfin::CoefficientAssigner Etag;
  dolfin::CoefficientAssigner pe;
  dolfin::CoefficientAssigner M;
  dolfin::CoefficientAssigner m;
  dolfin::CoefficientAssigner g;
  dolfin::CoefficientAssigner h;
  dolfin::CoefficientAssigner p_sat;
  dolfin::CoefficientAssigner p_width;
  dolfin::CoefficientAssigner omega;
};

class MultiMeshForm_a: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), phi0(*this, 0), wk(*this, 1), K(*this, 2), Mu(*this, 3), Kil(*this, 4), Etal(*this, 5), rhoL(*this, 6), Kig(*this, 7), Etag(*this, 8), pe(*this, 9), M(*this, 10), m(*this, 11), g(*this, 12), h(*this, 13), p_sat(*this, 14), p_width(*this, 15), omega(*this, 16)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> phi0, std::shared_ptr<const dolfin::GenericFunction> wk, std::shared_ptr<const dolfin::GenericFunction> K, std::shared_ptr<const dolfin::GenericFunction> Mu, std::shared_ptr<const dolfin::GenericFunction> Kil, std::shared_ptr<const dolfin::GenericFunction> Etal, std::shared_ptr<const dolfin::GenericFunction> rhoL, std::shared_ptr<const dolfin::GenericFunction> Kig, std::shared_ptr<const dolfin::GenericFunction> Etag, std::shared_ptr<const dolfin::GenericFunction> pe, std::shared_ptr<const dolfin::GenericFunction> M, std::shared_ptr<const dolfin::GenericFunction> m, std::shared_ptr<const dolfin::GenericFunction> g, std::shared_ptr<const dolfin::GenericFunction> h, std::shared_ptr<const dolfin::GenericFunction> p_sat, std::shared_ptr<const dolfin::GenericFunction> p_width, std::shared_ptr<const dolfin::GenericFunction> omega):
    dolfin::MultiMeshForm(V1, V0), phi0(*this, 0), wk(*this, 1), K(*this, 2), Mu(*this, 3), Kil(*this, 4), Etal(*this, 5), rhoL(*this, 6), Kig(*this, 7), Etag(*this, 8), pe(*this, 9), M(*this, 10), m(*this, 11), g(*this, 12), h(*this, 13), p_sat(*this, 14), p_width(*this, 15), omega(*this, 16)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->phi0 = phi0;
    this->wk = wk;
    this->K = K;
    this->Mu = Mu;
    this->Kil = Kil;
    this->Etal = Etal;
    this->rhoL = rhoL;
    this->Kig = Kig;
    this->Etag = Etag;
    this->pe = pe;
    this->M = M;
    this->m = m;
    this->g = g;
    this->h = h;
    this->p_sat = p_sat;
    this->p_width = p_width;
    this->omega = omega;

  }

  // Destructor
  ~MultiMeshForm_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "phi0")
      return 0;
    else if (name == "wk")
      return 1;
    else if (name == "K")
      return 2;
    else if (name == "Mu")
      return 3;
    else if (name == "Kil")
      return 4;
    else if (name == "Etal")
      return 5;
    else if (name == "rhoL")
      return 6;
    else if (name == "Kig")
      return 7;
    else if (name == "Etag")
      return 8;
    else if (name == "pe")
      return 9;
    else if (name == "M")
      return 10;
    else if (name == "m")
      return 11;
    else if (name == "g")
      return 12;
    else if (name == "h")
      return 13;
    else if (name == "p_sat")
      return 14;
    else if (name == "p_width")
      return 15;
    else if (name == "omega")
      return 16;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "phi0";
    case 1:
      return "wk";
    case 2:
      return "K";
    case 3:
      return "Mu";
    case 4:
      return "Kil";
    case 5:
      return "Etal";
    case 6:
      return "rhoL";
    case 7:
      return "Kig";
    case 8:
      return "Etag";
    case 9:
      return "pe";
    case 10:
      return "M";
    case 11:
      return "m";
    case 12:
      return "g";
    case 13:
      return "h";
    case 14:
      return "p_sat";
    case 15:
      return "p_width";
    case 16:
      return "omega";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_a_FunctionSpace_2 CoefficientSpace_phi0;
  typedef Form_a_FunctionSpace_3 CoefficientSpace_wk;
  typedef Form_a_FunctionSpace_4 CoefficientSpace_K;
  typedef Form_a_FunctionSpace_5 CoefficientSpace_Mu;
  typedef Form_a_FunctionSpace_6 CoefficientSpace_Kil;
  typedef Form_a_FunctionSpace_7 CoefficientSpace_Etal;
  typedef Form_a_FunctionSpace_8 CoefficientSpace_rhoL;
  typedef Form_a_FunctionSpace_9 CoefficientSpace_Kig;
  typedef Form_a_FunctionSpace_10 CoefficientSpace_Etag;
  typedef Form_a_FunctionSpace_11 CoefficientSpace_pe;
  typedef Form_a_FunctionSpace_12 CoefficientSpace_M;
  typedef Form_a_FunctionSpace_13 CoefficientSpace_m;
  typedef Form_a_FunctionSpace_14 CoefficientSpace_g;
  typedef Form_a_FunctionSpace_15 CoefficientSpace_h;
  typedef Form_a_FunctionSpace_16 CoefficientSpace_p_sat;
  typedef Form_a_FunctionSpace_17 CoefficientSpace_p_width;
  typedef Form_a_FunctionSpace_18 CoefficientSpace_omega;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner phi0;
  dolfin::MultiMeshCoefficientAssigner wk;
  dolfin::MultiMeshCoefficientAssigner K;
  dolfin::MultiMeshCoefficientAssigner Mu;
  dolfin::MultiMeshCoefficientAssigner Kil;
  dolfin::MultiMeshCoefficientAssigner Etal;
  dolfin::MultiMeshCoefficientAssigner rhoL;
  dolfin::MultiMeshCoefficientAssigner Kig;
  dolfin::MultiMeshCoefficientAssigner Etag;
  dolfin::MultiMeshCoefficientAssigner pe;
  dolfin::MultiMeshCoefficientAssigner M;
  dolfin::MultiMeshCoefficientAssigner m;
  dolfin::MultiMeshCoefficientAssigner g;
  dolfin::MultiMeshCoefficientAssigner h;
  dolfin::MultiMeshCoefficientAssigner p_sat;
  dolfin::MultiMeshCoefficientAssigner p_width;
  dolfin::MultiMeshCoefficientAssigner omega;
};

class Form_L_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<initialnewton2d_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<initialnewton2d_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_L_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_L_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_L_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_w0 Form_L_FunctionSpace_1;

typedef CoefficientSpace_phi0 Form_L_FunctionSpace_2;

typedef CoefficientSpace_wk Form_L_FunctionSpace_3;

typedef CoefficientSpace_K Form_L_FunctionSpace_4;

typedef CoefficientSpace_Mu Form_L_FunctionSpace_5;

typedef CoefficientSpace_rhoS Form_L_FunctionSpace_6;

typedef CoefficientSpace_Kil Form_L_FunctionSpace_7;

typedef CoefficientSpace_Etal Form_L_FunctionSpace_8;

typedef CoefficientSpace_rhoL Form_L_FunctionSpace_9;

typedef CoefficientSpace_Kig Form_L_FunctionSpace_10;

typedef CoefficientSpace_Etag Form_L_FunctionSpace_11;

typedef CoefficientSpace_pe Form_L_FunctionSpace_12;

typedef CoefficientSpace_M Form_L_FunctionSpace_13;

typedef CoefficientSpace_m Form_L_FunctionSpace_14;

typedef CoefficientSpace_g Form_L_FunctionSpace_15;

typedef CoefficientSpace_h Form_L_FunctionSpace_16;

typedef CoefficientSpace_p_sat Form_L_FunctionSpace_17;

typedef CoefficientSpace_p_width Form_L_FunctionSpace_18;

typedef CoefficientSpace_omega Form_L_FunctionSpace_19;

class Form_L: public dolfin::Form
{
public:

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 19), w0(*this, 0), phi0(*this, 1), wk(*this, 2), K(*this, 3), Mu(*this, 4), rhoS(*this, 5), Kil(*this, 6), Etal(*this, 7), rhoL(*this, 8), Kig(*this, 9), Etag(*this, 10), pe(*this, 11), M(*this, 12), m(*this, 13), g(*this, 14), h(*this, 15), p_sat(*this, 16), p_width(*this, 17), omega(*this, 18)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const initialnewton2d_form_1>();
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> w0, std::shared_ptr<const dolfin::GenericFunction> phi0, std::shared_ptr<const dolfin::GenericFunction> wk, std::shared_ptr<const dolfin::GenericFunction> K, std::shared_ptr<const dolfin::GenericFunction> Mu, std::shared_ptr<const dolfin::GenericFunction> rhoS, std::shared_ptr<const dolfin::GenericFunction> Kil, std::shared_ptr<const dolfin::GenericFunction> Etal, std::shared_ptr<const dolfin::GenericFunction> rhoL, std::shared_ptr<const dolfin::GenericFunction> Kig, std::shared_ptr<const dolfin::GenericFunction> Etag, std::shared_ptr<const dolfin::GenericFunction> pe, std::shared_ptr<const dolfin::GenericFunction> M, std::shared_ptr<const dolfin::GenericFunction> m, std::shared_ptr<const dolfin::GenericFunction> g, std::shared_ptr<const dolfin::GenericFunction> h, std::shared_ptr<const dolfin::GenericFunction> p_sat, std::shared_ptr<const dolfin::GenericFunction> p_width, std::shared_ptr<const dolfin::GenericFunction> omega):
    dolfin::Form(1, 19), w0(*this, 0), phi0(*this, 1), wk(*this, 2), K(*this, 3), Mu(*this, 4), rhoS(*this, 5), Kil(*this, 6), Etal(*this, 7), rhoL(*this, 8), Kig(*this, 9), Etag(*this, 10), pe(*this, 11), M(*this, 12), m(*this, 13), g(*this, 14), h(*this, 15), p_sat(*this, 16), p_width(*this, 17), omega(*this, 18)
  {
    _function_spaces[0] = V0;

    this->w0 = w0;
    this->phi0 = phi0;
    this->wk = wk;
    this->K = K;
    this->Mu = Mu;
    this->rhoS = rhoS;
    this->Kil = Kil;
    this->Etal = Etal;
    this->rhoL = rhoL;
    this->Kig = Kig;
    this->Etag = Etag;
    this->pe = pe;
    this->M = M;
    this->m = m;
    this->g = g;
    this->h = h;
    this->p_sat = p_sat;
    this->p_width = p_width;
    this->omega = omega;

    _ufc_form = std::make_shared<const initialnewton2d_form_1>();
  }

  // Destructor
  ~Form_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "w0")
      return 0;
    else if (name == "phi0")
      return 1;
    else if (name == "wk")
      return 2;
    else if (name == "K")
      return 3;
    else if (name == "Mu")
      return 4;
    else if (name == "rhoS")
      return 5;
    else if (name == "Kil")
      return 6;
    else if (name == "Etal")
      return 7;
    else if (name == "rhoL")
      return 8;
    else if (name == "Kig")
      return 9;
    else if (name == "Etag")
      return 10;
    else if (name == "pe")
      return 11;
    else if (name == "M")
      return 12;
    else if (name == "m")
      return 13;
    else if (name == "g")
      return 14;
    else if (name == "h")
      return 15;
    else if (name == "p_sat")
      return 16;
    else if (name == "p_width")
      return 17;
    else if (name == "omega")
      return 18;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "w0";
    case 1:
      return "phi0";
    case 2:
      return "wk";
    case 3:
      return "K";
    case 4:
      return "Mu";
    case 5:
      return "rhoS";
    case 6:
      return "Kil";
    case 7:
      return "Etal";
    case 8:
      return "rhoL";
    case 9:
      return "Kig";
    case 10:
      return "Etag";
    case 11:
      return "pe";
    case 12:
      return "M";
    case 13:
      return "m";
    case 14:
      return "g";
    case 15:
      return "h";
    case 16:
      return "p_sat";
    case 17:
      return "p_width";
    case 18:
      return "omega";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_w0;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_phi0;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_wk;
  typedef Form_L_FunctionSpace_4 CoefficientSpace_K;
  typedef Form_L_FunctionSpace_5 CoefficientSpace_Mu;
  typedef Form_L_FunctionSpace_6 CoefficientSpace_rhoS;
  typedef Form_L_FunctionSpace_7 CoefficientSpace_Kil;
  typedef Form_L_FunctionSpace_8 CoefficientSpace_Etal;
  typedef Form_L_FunctionSpace_9 CoefficientSpace_rhoL;
  typedef Form_L_FunctionSpace_10 CoefficientSpace_Kig;
  typedef Form_L_FunctionSpace_11 CoefficientSpace_Etag;
  typedef Form_L_FunctionSpace_12 CoefficientSpace_pe;
  typedef Form_L_FunctionSpace_13 CoefficientSpace_M;
  typedef Form_L_FunctionSpace_14 CoefficientSpace_m;
  typedef Form_L_FunctionSpace_15 CoefficientSpace_g;
  typedef Form_L_FunctionSpace_16 CoefficientSpace_h;
  typedef Form_L_FunctionSpace_17 CoefficientSpace_p_sat;
  typedef Form_L_FunctionSpace_18 CoefficientSpace_p_width;
  typedef Form_L_FunctionSpace_19 CoefficientSpace_omega;

  // Coefficients
  dolfin::CoefficientAssigner w0;
  dolfin::CoefficientAssigner phi0;
  dolfin::CoefficientAssigner wk;
  dolfin::CoefficientAssigner K;
  dolfin::CoefficientAssigner Mu;
  dolfin::CoefficientAssigner rhoS;
  dolfin::CoefficientAssigner Kil;
  dolfin::CoefficientAssigner Etal;
  dolfin::CoefficientAssigner rhoL;
  dolfin::CoefficientAssigner Kig;
  dolfin::CoefficientAssigner Etag;
  dolfin::CoefficientAssigner pe;
  dolfin::CoefficientAssigner M;
  dolfin::CoefficientAssigner m;
  dolfin::CoefficientAssigner g;
  dolfin::CoefficientAssigner h;
  dolfin::CoefficientAssigner p_sat;
  dolfin::CoefficientAssigner p_width;
  dolfin::CoefficientAssigner omega;
};

class MultiMeshForm_L: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), w0(*this, 0), phi0(*this, 1), wk(*this, 2), K(*this, 3), Mu(*this, 4), rhoS(*this, 5), Kil(*this, 6), Etal(*this, 7), rhoL(*this, 8), Kig(*this, 9), Etag(*this, 10), pe(*this, 11), M(*this, 12), m(*this, 13), g(*this, 14), h(*this, 15), p_sat(*this, 16), p_width(*this, 17), omega(*this, 18)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> w0, std::shared_ptr<const dolfin::GenericFunction> phi0, std::shared_ptr<const dolfin::GenericFunction> wk, std::shared_ptr<const dolfin::GenericFunction> K, std::shared_ptr<const dolfin::GenericFunction> Mu, std::shared_ptr<const dolfin::GenericFunction> rhoS, std::shared_ptr<const dolfin::GenericFunction> Kil, std::shared_ptr<const dolfin::GenericFunction> Etal, std::shared_ptr<const dolfin::GenericFunction> rhoL, std::shared_ptr<const dolfin::GenericFunction> Kig, std::shared_ptr<const dolfin::GenericFunction> Etag, std::shared_ptr<const dolfin::GenericFunction> pe, std::shared_ptr<const dolfin::GenericFunction> M, std::shared_ptr<const dolfin::GenericFunction> m, std::shared_ptr<const dolfin::GenericFunction> g, std::shared_ptr<const dolfin::GenericFunction> h, std::shared_ptr<const dolfin::GenericFunction> p_sat, std::shared_ptr<const dolfin::GenericFunction> p_width, std::shared_ptr<const dolfin::GenericFunction> omega):
    dolfin::MultiMeshForm(V0), w0(*this, 0), phi0(*this, 1), wk(*this, 2), K(*this, 3), Mu(*this, 4), rhoS(*this, 5), Kil(*this, 6), Etal(*this, 7), rhoL(*this, 8), Kig(*this, 9), Etag(*this, 10), pe(*this, 11), M(*this, 12), m(*this, 13), g(*this, 14), h(*this, 15), p_sat(*this, 16), p_width(*this, 17), omega(*this, 18)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->w0 = w0;
    this->phi0 = phi0;
    this->wk = wk;
    this->K = K;
    this->Mu = Mu;
    this->rhoS = rhoS;
    this->Kil = Kil;
    this->Etal = Etal;
    this->rhoL = rhoL;
    this->Kig = Kig;
    this->Etag = Etag;
    this->pe = pe;
    this->M = M;
    this->m = m;
    this->g = g;
    this->h = h;
    this->p_sat = p_sat;
    this->p_width = p_width;
    this->omega = omega;

  }

  // Destructor
  ~MultiMeshForm_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "w0")
      return 0;
    else if (name == "phi0")
      return 1;
    else if (name == "wk")
      return 2;
    else if (name == "K")
      return 3;
    else if (name == "Mu")
      return 4;
    else if (name == "rhoS")
      return 5;
    else if (name == "Kil")
      return 6;
    else if (name == "Etal")
      return 7;
    else if (name == "rhoL")
      return 8;
    else if (name == "Kig")
      return 9;
    else if (name == "Etag")
      return 10;
    else if (name == "pe")
      return 11;
    else if (name == "M")
      return 12;
    else if (name == "m")
      return 13;
    else if (name == "g")
      return 14;
    else if (name == "h")
      return 15;
    else if (name == "p_sat")
      return 16;
    else if (name == "p_width")
      return 17;
    else if (name == "omega")
      return 18;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "w0";
    case 1:
      return "phi0";
    case 2:
      return "wk";
    case 3:
      return "K";
    case 4:
      return "Mu";
    case 5:
      return "rhoS";
    case 6:
      return "Kil";
    case 7:
      return "Etal";
    case 8:
      return "rhoL";
    case 9:
      return "Kig";
    case 10:
      return "Etag";
    case 11:
      return "pe";
    case 12:
      return "M";
    case 13:
      return "m";
    case 14:
      return "g";
    case 15:
      return "h";
    case 16:
      return "p_sat";
    case 17:
      return "p_width";
    case 18:
      return "omega";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_w0;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_phi0;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_wk;
  typedef Form_L_FunctionSpace_4 CoefficientSpace_K;
  typedef Form_L_FunctionSpace_5 CoefficientSpace_Mu;
  typedef Form_L_FunctionSpace_6 CoefficientSpace_rhoS;
  typedef Form_L_FunctionSpace_7 CoefficientSpace_Kil;
  typedef Form_L_FunctionSpace_8 CoefficientSpace_Etal;
  typedef Form_L_FunctionSpace_9 CoefficientSpace_rhoL;
  typedef Form_L_FunctionSpace_10 CoefficientSpace_Kig;
  typedef Form_L_FunctionSpace_11 CoefficientSpace_Etag;
  typedef Form_L_FunctionSpace_12 CoefficientSpace_pe;
  typedef Form_L_FunctionSpace_13 CoefficientSpace_M;
  typedef Form_L_FunctionSpace_14 CoefficientSpace_m;
  typedef Form_L_FunctionSpace_15 CoefficientSpace_g;
  typedef Form_L_FunctionSpace_16 CoefficientSpace_h;
  typedef Form_L_FunctionSpace_17 CoefficientSpace_p_sat;
  typedef Form_L_FunctionSpace_18 CoefficientSpace_p_width;
  typedef Form_L_FunctionSpace_19 CoefficientSpace_omega;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner w0;
  dolfin::MultiMeshCoefficientAssigner phi0;
  dolfin::MultiMeshCoefficientAssigner wk;
  dolfin::MultiMeshCoefficientAssigner K;
  dolfin::MultiMeshCoefficientAssigner Mu;
  dolfin::MultiMeshCoefficientAssigner rhoS;
  dolfin::MultiMeshCoefficientAssigner Kil;
  dolfin::MultiMeshCoefficientAssigner Etal;
  dolfin::MultiMeshCoefficientAssigner rhoL;
  dolfin::MultiMeshCoefficientAssigner Kig;
  dolfin::MultiMeshCoefficientAssigner Etag;
  dolfin::MultiMeshCoefficientAssigner pe;
  dolfin::MultiMeshCoefficientAssigner M;
  dolfin::MultiMeshCoefficientAssigner m;
  dolfin::MultiMeshCoefficientAssigner g;
  dolfin::MultiMeshCoefficientAssigner h;
  dolfin::MultiMeshCoefficientAssigner p_sat;
  dolfin::MultiMeshCoefficientAssigner p_width;
  dolfin::MultiMeshCoefficientAssigner omega;
};

// Class typedefs
typedef Form_a BilinearForm;
typedef MultiMeshForm_a MultiMeshBilinearForm;
typedef Form_a JacobianForm;
typedef MultiMeshForm_a MultiMeshJacobianForm;
typedef Form_L LinearForm;
typedef MultiMeshForm_L MultiMeshLinearForm;
typedef Form_L ResidualForm;
typedef MultiMeshForm_L MultiMeshResidualForm;
typedef Form_a::TestSpace FunctionSpace;
typedef Form_a::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
